C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Абузагиров.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Якубов.cs
    public (int, int) Task_1_5(int[,] A, int colIndex)        int value = 0, rowIndex = -1;        for (int i = 0; i < A.GetLength(0); i++)                rowIndex = i;                break;                rowIndex = 0;    public int[,] Task_2_6(int n)        int[,] answer = default(int[,]);        if (n < 3)        answer = new int[n, n * 3];        for (int i = 0; i < n; i++)            for (int j = 0; j < n * 3; j++)                if (i == j || i == j - 3 || i == j - 6)                    answer[i, j] = 1;                else                    answer[i, j] = 0;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int[] lower = default(int[]);        if (matrix.GetLength(0) != matrix.GetLength(1))        int n = matrix.GetLength(0);        int upperrange = (n * n) / 2 + (n / 2);        upper = new int[upperrange];        lower = new int[n * n - upperrange];        for(int i = 0; i < n; i++)        for(int i = 0; i < n; i++)    public int[,] Task_3_8(int[,] matrix)        if (matrix.GetLength(0) != 7 && (matrix.GetLength(1) != 5))        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        for(int i = 0; i < n; i++)            int kol = 0;            for(int j = 0; j < m; j++)                if (matrix[i, j] > 0)                    kol++;        for (int i = 0; i < n; i++)        for (int i = 0; i < n - 1; i++)            for (int j = 0; j < n - i - 1; j++)                    for (int k = 0; k < m; k++)                        int temp = matrix[j, k];                        matrix[j, k] = matrix[j + 1, k];                        matrix[j + 1, k] = temp;    public int[,] Task_3_10(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        for(int i = 0; i < n; i++)            for(int j = 0; j < m - 1; j++)                for(int k = 0; k < m - j - 1; k++)                    if(i % 2 == 0)                        if (matrix[i, k] < matrix[i, k + 1])                            int temp = matrix[i, k];                            matrix[i, k] = matrix[i, k + 1];                            matrix[i, k + 1] = temp;                    else                        if (matrix[i, k] > matrix[i, k + 1])                            int temp2 = matrix[i, k];                            matrix[i, k] = matrix[i, k + 1];                            matrix[i, k + 1] = temp2;    public int[,] Task_3_11(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (matrix[i, j] == 0)                    break;        int i2 = 0;        for (int i = 0; i < n; i++)            bool proverka0 = false;            for (int j = 0; j < m; j++)                if (matrix[i, j] == 0)                    proverka0 = true;                    break;            if (proverka0 == false)                for (int j = 0; j < m; j++)                    matrix2[i2, j] = matrix[i, j];                i2++;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Аверченко.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Беломестнова.cs
    public (int, int) Task_1_5(int[,] A, int colIndex)        int value = 0, rowIndex = -1;        if (rowIndex == -1)            value = 0;            rowIndex = 0;            if (A[i, colIndex] < 0)                value = A[i, colIndex];                rowIndex = i;                break;    public int[,] Task_1_11(int[,] A)        double min = A[0, 0];        int k = 0;        int[,] B = new int[A.GetLength(0) - 1, A.GetLength(1)];        for (int i = 0; i < A.GetLength(0); i++)            if (A[i, 0] < min)                min = A[i, 0];                k = i;        for (int i = 0; i < A.GetLength(0) - 1; i++)                    B[i, j] = A[i, j];                    B[i, j] = A[i + 1, j];        A = B;    public int[] Task_1_14(int[,] A)        int[] answer = default(int[]);        answer = new int[A.GetLength(1)];        if (A.GetLength(0) != 4 || A.GetLength(1) != 3)        for (int j = 0; j < A.GetLength(1); j++)            for (int i = 0; i < A.GetLength(0); i++)                if (A[i, j] < 0)    public int[,] Task_1_17(int[,] B, int n, int m)        for (int i = 0; i < n; i++)                if (B[i, j] < min)                    min = B[i, j];                    k = j;            p[0] = min;            for (int j = 0; j < m; j++)                if (j != k)            for (int j = 0; j < m; j++)                B[i, j] = p[j];    public double[,] Task_1_20(double[,] F, int n, int m)        for (int i = 0; i < n; i++)            double max = F[i, 0];            for (int j = 0; j < m; j++)                if (F[i, j] > max)                    max = F[i, j];                    k = j;                if (F[i, j] < 0)                    p++;            for (int j = 0; j < m; j++)                if (F[i, j] < 0)                    break;            F[i, k] = sum;    public int[,] Task_1_23(int[,] G)                if (G[i, j] > max)                    max = G[i, j];                    k = j;                    p[j] = G[i, j];                    p[j] = max;                else                    p[j] = G[i, j - 1];                G[i, j] = p[j];    public int[,] Task_1_26(int[,] A, int[] B)        for (int i = 0; i < A.GetLength(0); i++)            if (A[i, 5] > max)                max = A[i, 5];                k = i;        for (int j = 0; j < A.GetLength(1); j++)            A[k, j] = B[j];    public int[,] Task_1_29(int[,] F)        for (int j = 0; j < F.GetLength(1); j++)            if (Math.Abs(F[1, j]) < min)                min = Math.Abs(F[1, j]);                k = j;        for (int j = 0; j < F.GetLength(1) - 1; j++)            if (j < k + 1)                for (int i = 0; i < F.GetLength(0); i++)            else                for (int i = 0; i < F.GetLength(0); i++)
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Ананьева.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Таровик.cs
    public (int, int) Task_1_4(int[,] A)        int row = 0, col = 0;                if (A[i, j] < min)                    min = A[i, j];                    row = i;                    col = j;    public int[,] Task_1_16(int[,] A, int n, int m)        int max = int.MinValue, ii = 0, jj = 0;        int p = 0;        for (int i = 0; i < n; i++)            max = int.MinValue;            for (int j = 0; j < m; j++)                if (A[i, j] > max)                    max = A[i, j];                    jj = j;            if (jj != m - 1)                p = A[i, jj];                for (int j = jj; j < m - 1; j++)                    A[i, j] = A[i, j + 1];                A[i, m - 1] = p;    public double[,] Task_1_19(double[,] C, int n, int m)        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (C[i, j] > max)                    max = C[i, j];            if (max != 0)                    if (C[i, j] < 0)                        C[i, j] /= max;    public int[,] Task_1_25(int[,] X)        int n = X.GetLength(0), m = X.GetLength(1);        int maxn = 0, minn = m, maxi = 0, maxj = 0, mini = 0, minj = 0, p = 0;        for (int i = 0; i < n; i++)            int max = 0, min = 0;            for (int j = 0; j < m; j++)                if ((X[i, j] < 0))                    max++;                    min++;            if (max > maxn)                maxn = max;                mini = i;            if (min < minn)                minn = min;                maxi = i;        for (int j = 0; j < m; j++)            p = X[mini, j];            X[mini, j] = X[maxi, j];            X[maxi, j] = p;    public int[,] Task_1_31(int[,] A, int[] B)        int mini = A[4, 0], minj = 0;            if (A[4, j] < mini)                mini = A[4, j];                minj = j;                A[i, j] = A[i, j - 1];            A[i, minj + 1] = B[i];    public int[,] Task_2_3(int[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        for (int j = 0; j < m; j++)            for (int i = 0; i < n; i++)                if (A[i, j] > max)                    max = A[i, j];                    sum += A[i, j];                A[0, j] = sum;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Бахров.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Горохова.cs
    public double[,] Task_2_1(double[,] A)        int n = A.GetLength(0);        int m = A.GetLength(1);        if (n != 5 || m != 7)        for (int i = 0; i < n; i++)            double amax = -100;            int jmax = -1;                    amax = A[i, j];                    jmax = j;            if (jmax != 0 && jmax != m - 1)                if (A[i, jmax - 1] > A[i, jmax + 1])                    if (A[i, jmax + 1] > 0)                        A[i, jmax + 1] *= 2;                    else if (A[i, jmax + 1] < 0)                        A[i, jmax + 1] /= 2;                else if (A[i, jmax - 1] < A[i, jmax + 1])                    if (A[i, jmax - 1] > 0)                        A[i, jmax - 1] *= 2;                    else if (A[i, jmax - 1] < 0)                        A[i, jmax - 1] /= 2;                    if (jmax == m - 1)                        if (A[i, jmax - 1] > 0)                            A[i, jmax - 1] *= 2;                        else if (A[i, jmax - 1] < 0)                            A[i, jmax - 1] /= 2;                        if (A[i, jmax + 1] > 0)                            A[i, jmax + 1] *= 2;                        else if (A[i, jmax + 1] < 0)                            A[i, jmax + 1] /= 2;    #endregion    public int[,] Task_2_9(int[,] A)    #region Level 3    public int[,] Task_3_1(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (matrix == null || n != 7 || m != 5)        for (int i = 0; i < n - 1; i++)            for (int j = i + 1; j < n; j++)                int imin = 100000, jmin = 100000;                for (int k = 0; k < m; k++)                    if (matrix[i, k] < imin)                        imin = matrix[i, k];                    if (matrix[j, k] < jmin)                        jmin = matrix[j, k];                if (imin < jmin)                    for (int k = 0; k < m; k++)                        int temp = matrix[i, k];                        matrix[i, k] = matrix[j, k];                        matrix[j, k] = temp;    public int[,] Task_3_2(int[,] matrix)    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (n != m)        answer = new int[n * 2 - 1];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int ind = j - i + (n - 1);                answer[ind] += matrix[i, j];    public int[,] Task_3_4(int[,] matrix)    public int[,] Task_3_5(int[,] matrix, int k)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (matrix == null || n != m || k < 1 || k > n)        int amax = -100000, imax = 0, jmax = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (amax < Math.Abs(matrix[i, j]))                    amax = Math.Abs(matrix[i, j]);                    imax = i;                    jmax = j;        if (jmax != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[i, jmax];                matrix[i, jmax] = matrix[i, k - 1];                matrix[i, k - 1] = temp;        if (imax != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[imax, i];                matrix[imax, i] = matrix[k - 1, i];                matrix[k - 1, i] = temp;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int[] lower = default(int[]);    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        answer = new int[n * n];        int[,] mA = new int[n, n];        int[,] mB = new int[n, n];        int k = 0;        int c = 0;        if (n <= 0 || A.Length / 2 != n || B.Length / 2 != n)        for (int i = 0; i < n; i++)            for (int j = i; j < n; j++)                mA[i, j] = A[k];                mB[i, j] = B[k];                k++;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                mA[j, i] = mA[i, j];                mB[j, i] = mB[i, j];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int s = 0;                for (int q = 0; q < n; q++)                    s += (mA[i, q] * mB[q, j]);                answer[c++] = s;    public int[,] Task_3_8(int[,] matrix)    public int[,] Task_3_9(int[,] matrix)        int[] array = new int[7];        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int k = 0;        int c = 0;        if (n != 5 && m != 7)        for (int j = 0; j < 7; j++)            int g = 0;            for (int i = 0; i < 5; i++)                if (matrix[i, j] < 0)                    g++;        for (int j = 0; j < 7; j++)            for (int i = 0; i < 5; i++)                    c = array[i + 1];                    array[i + 1] = array[i];                    array[i] = c;                    for (int q = 0; q < 5; q++)                        c = matrix[q, i];                        matrix[q, i] = matrix[q, i + 1];                        matrix[q, i + 1] = c;    public int[,] Task_3_10(int[,] matrix)    public int[,] Task_3_11(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int z = n;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (matrix[i, j] == 0)                    z--;                    matrix[i, 0] = 0;                    break;        int[,] A = new int[z, m];        int q = 0;        for (int i = 0; i < n; i++)            if (matrix[i, 0] != 0)                for (int j = 0; j < m; j++)                    A[q, j] = matrix[i, j];                q++;        matrix = A;    public int[,] Task_3_1(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (matrix == null || n != 7 || m != 5)        for (int i = 0; i < n - 1; i++)            for (int j = i + 1; j < n; j++)                int imin = 100000, jmin = 100000;                for (int k = 0; k < m; k++)                    if (matrix[i, k] < imin)                        imin = matrix[i, k];                    if (matrix[j, k] < jmin)                        jmin = matrix[j, k];                if (imin < jmin)                    for (int k = 0; k < m; k++)                        int temp = matrix[i, k];                        matrix[i, k] = matrix[j, k];                        matrix[j, k] = temp;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (n != m)        answer = new int[n * 2 - 1];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int ind = j - i + (n - 1);                answer[ind] += matrix[i, j];    public int[,] Task_3_5(int[,] matrix, int k)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (matrix == null || n != m || k < 1 || k > n)        int amax = -100000, imax = 0, jmax = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (amax < Math.Abs(matrix[i, j]))                    amax = Math.Abs(matrix[i, j]);                    imax = i;                    jmax = j;        if (jmax != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[i, jmax];                matrix[i, jmax] = matrix[i, k - 1];                matrix[i, k - 1] = temp;        if (imax != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[imax, i];                matrix[imax, i] = matrix[k - 1, i];                matrix[k - 1, i] = temp;    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        answer = new int[n * n];        int[,] mA = new int[n, n];        int[,] mB = new int[n, n];        int k = 0;        int c = 0;        if (n <= 0 || A.Length / 2 != n || B.Length / 2 != n)        for (int i = 0; i < n; i++)            for (int j = i; j < n; j++)                mA[i, j] = A[k];                mB[i, j] = B[k];                k++;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                mA[j, i] = mA[i, j];                mB[j, i] = mB[i, j];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int s = 0;                for (int q = 0; q < n; q++)                    s += (mA[i, q] * mB[q, j]);                answer[c++] = s;    public int[,] Task_3_9(int[,] matrix)        int[] array = new int[7];        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int k = 0;        int c = 0;        if (n != 5 && m != 7)        for (int j = 0; j < 7; j++)            int g = 0;            for (int i = 0; i < 5; i++)                if (matrix[i, j] < 0)                    g++;        for (int j = 0; j < 7; j++)            for (int i = 0; i < 5; i++)                    c = array[i + 1];                    array[i + 1] = array[i];                    array[i] = c;                    for (int q = 0; q < 5; q++)                        c = matrix[q, i];                        matrix[q, i] = matrix[q, i + 1];                        matrix[q, i + 1] = c;    public int[,] Task_3_11(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int z = n;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (matrix[i, j] == 0)                    z--;                    matrix[i, 0] = 0;                    break;        int[,] A = new int[z, m];        int q = 0;        for (int i = 0; i < n; i++)            if (matrix[i, 0] != 0)                for (int j = 0; j < m; j++)                    A[q, j] = matrix[i, j];                q++;        matrix = A;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Болошенко.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Зайцева Елизавета.cs
    public double[] Task_1_8(int[,] A)        double[] answer = default(double[]);        double avg;        int rows = A.GetLength(0);        int columns = A.GetLength(1);        if (A == null || A.GetLength(0) != 4 || A.GetLength(1) != 6)        answer = new double[A.GetLength(0)];        for (int i = 0; i < A.GetLength(0); i++)            double sum = 0;            for (int j = 0; j < A.GetLength(1); j++)                if (A[i, j] > 0)                    sum += A[i, j];                Console.WriteLine(avg);                answer[i] = avg;    public int[,] Task_1_11(int[,] A)        int rows = A.GetLength(0);        int columns = A.GetLength(1);        for (int i = 1; i < rows; i++)            if (A[i, 0] < minValue)                minValue = A[i, 0];                rowIndex = i;        int[,] newAnswer = new int[rows - 1, columns];        int newRowIndex = 0;        for (int i = 0; i < rows; i++)                for (int j = 0; j < columns; j++)                    newAnswer[newRowIndex, j] = A[i, j];                newRowIndex++;        A = newAnswer;        for (int i = 0; i < newAnswer.GetLength(0); i++)            for (int j = 0; j < newAnswer.GetLength(1); j++)            Console.WriteLine();    public int[] Task_1_14(int[,] A)        int[] answer = default(int[]);        int columns = A.GetLength(1);        answer = new int[columns];        for (int j = 0; j < columns; j++)            int k = 0;                if (A[i, j] < 0) k += 1;            answer[j] = k;    public int[,] Task_1_26(int[,] A, int[] B)        int rows = A.GetLength(0);        int columns = A.GetLength(1);        if (A == null || rows != 5 || columns != 7 || B.Length != 7)        for (int i = 0; i < rows; i++)            for (int j = 0; j < columns; j++)                for (int j = 0; j < columns; j++)                    A[i, j] = B[j];    public int[,] Task_1_29(int[,] F)        int n = F.GetLength(0);        int m = F.GetLength(1);        int[,] newF = new int[n, m - 1];        if (F == null || F.GetLength(0) != 5 || F.GetLength(1) != 7)        for (int i = 0; i < n; i++)                newF[i, j] = F[i, j];                newF[i, j - 1] = F[i, j];        F = newF;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int[] lower = default(int[]);        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (matrix == null || n != m)        int k1 = 0;        int k2 = 0;            for (int j = 0; j < m; j++)                if (i <= j) k1++;                else k2++;        upper = new int[k1];        int upper_index = 0;        lower = new int[k2];        int lower_index = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                    upper[upper_index] = matrix[i, j];                    upper_index++;                    lower[lower_index] = matrix[i, j];                    lower_index++;        Console.WriteLine();        for (int i = 0; i < lower.Length; i++)
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Власова.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Церенкеева.cs
    public (int, int) Task_1_4(int[,] A)        int row = 0, col = 0;                if (A[i, j] < min)                    min = A[i, j];                    row = i;                    col = j;    public int[,] Task_1_25(int[,] X)        int n = X.GetLength(0);        int m = X.GetLength(1);        for (int i = 0; i < n; i++)            int k = 0;            for (int j = 0; j < m; j++)                if (X[i, j] < 0)                    k++;        for (int j = 0; j < m; j++)    public double[,] Task_2_5(double[,] A)        int n = A.GetLength(0);        int m = A.GetLength(1);        for (int j = 0; j < m; j++)            int index = 0;            for (int i = 0; i < n; i++)                    max = A[i, j];                    index = i;            if (A[index, j] < (A[0, j] + A[n - 1, j]) / 2)                A[index, j] = (A[0, j] + A[n - 1, j]) / 2;    public int[,] Task_2_6(int n)        int[,] answer = default(int[,]);        answer = new int[n, 3 * n];        for (int i = 0; i < n; i++)            for (int j = 0; j < 3 * n; j++)                if ((j - i) % n == 0)                    answer[i, j] = 1;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        answer = new int[2 * n - 1];        for (int i = 0; i < 2 * n - 1; i++)            answer[i] = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)    public int[,] Task_3_9(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        for (int i = 0; i < m; i++)            int k_otr = 0;            for (int j = 0; j < n; j++)                if (matrix[j, i] < 0) k_otr++;        for (int i = 0; i < m - 1; i++)            for (int j = 0; j < m - i - 1; j++)        int[,] newMatrix = new int[n, m];        for (int i = 0; i < m; i++)            for (int j = 0; j < n; j++)        matrix = newMatrix;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Вовк.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Талыкова.cs
    public int[,] Task_2_4(int[,] A, int[] B)        int strok = A.GetLength(0), stolb = A.GetLength(1), dlina = B.Length;        if (A == null || strok != 7 || stolb != 5 || B == null || dlina != 5)        for (int j = 0; j < stolb; j++)            for (int i = 0; i < strok; i++)                if (A[i, j] > elemax)                    elemax = A[i, j];                    indmax = i;            if (elemax < B[j])                A[indmax, j] = B[j];    public int[,] Task_3_2(int[,] matrix)        int n = matrix.GetLength(0);        if (matrix == null || matrix.GetLength(0) != matrix.GetLength(1))        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (i == 0 || i == n - 1)                    matrix[i, j] = 0;                else                    matrix[i, 0] = 0;                    matrix[i, n - 1] = 0;    public int[,] Task_3_4(int[,] matrix)        int n = matrix.GetLength(0);        if (matrix == null || matrix.GetLength(0) != matrix.GetLength(1))        for (int i = n / 2; i < n; i++)            for (int j = 0; j < n; j++)                if (i >= j)                    matrix[i, j] = 1;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int[] lower = default(int[]);        int n = matrix.GetLength(0), nomerupper = 0, nomerlower = 0;        if (matrix == null || matrix.GetLength(0) != matrix.GetLength(1))        lower = new int[n * n - n * n / 2 - n / 2];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (i <= j)                    upper[nomerupper++] = matrix[i, j];                else                    lower[nomerlower++] = matrix[i, j];    public int[,] Task_3_8(int[,] matrix)        int strok = matrix.GetLength(0), stolb = matrix.GetLength(1);        if (matrix == null || strok != 7 || stolb != 5)            int kolvootriz1 = 0, kolvootriz2 = 0;            for (int j = 0; j < stolb; j++)                if (matrix[i, j] < 0)                    kolvootriz1++;            for (int j = 0; j < stolb; j++)                    kolvootriz2++;            if (kolvootriz1 > kolvootriz2)                int reserv = 0;                for (int j = 0; j < stolb; j++)                    matrix[i, j] = reserv;                i = -1;    public int[,] Task_3_10(int[,] matrix)        int strok = matrix.GetLength(0), stolb = matrix.GetLength(1);        if (matrix == null)        for (int i = 0; i < strok; i += 2)            for (int j = 1; j < stolb; j++)                int key = matrix[i, j], k = j - 1;                while (k >= 0 && matrix[i, k] < key)                    matrix[i, k + 1] = matrix[i, k];                    k--;                matrix[i, k + 1] = key;        for (int i = 1; i < strok; i += 2)            for (int j = 1; j < stolb; j++)                int key = matrix[i, j], k = j - 1;                while (k >= 0 && matrix[i, k] > key)                    matrix[i, k + 1] = matrix[i, k];                    k--;                matrix[i, k + 1] = key;        if (strok / 2 == 0)            for (int j = 1; j < stolb; j++)                int key = matrix[strok - 1, j], k = j - 1;                while (k >= 0 && matrix[strok - 1, k] < key)                    matrix[strok - 1, k + 1] = matrix[strok - 1, k];                    k--;                matrix[strok - 1, k + 1] = key;    public int[,] Task_3_11(int[,] matrix)        int strok = matrix.GetLength(0), stolb = matrix.GetLength(1);        int minusstrok = 0;        if (matrix == null)        for (int i = 0; i < strok; i++)            for (int j = 0; j < stolb; j++)                if (matrix[i, j] == 0)                    minusstrok++;                    break;        int[,] array = new int[strok - minusstrok, stolb];        for (int i = 0, k = 0; i < strok; i++)            int flag = 0;            for (int j = 0; j < stolb; j++)                if (matrix[i, j] == 0)                    flag++;                    break;            for (int j = 0; j < stolb; j++)                if (flag == 0)                    array[k, j] = matrix[i, j];            if (flag == 0)                k++;        matrix = array;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Глазунов.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Задорожный.cs
    public int Task_1_3(int[,] A)        int answer = 0;        for (int i = 0; i < A.GetLength(0); i++)            answer += A[i, i];    public int[] Task_1_6(int[,] A)        int[] answer = default(int[]);        answer = new int[A.GetLength(0)];        for (int i = 0; i < A.GetLength(0); i++)            for (int j = 0; j < A.GetLength(1); j++)                if (A[i, j] < min)                    min = A[i, j];                    answer[i] = j;    public int[,] Task_1_21(int[,] H)        for (int i = 0; i < H.GetLength(0); i++)            for (int j = 0; j < H.GetLength(1) - 1; j++)                if (H[i, j] > max)                    max = H[i, j];            H[i, 6] = H[i, 5];            H[i, 5] = max;    public int[,] Task_1_27(int[,] B)        int[,] B1 = new int[B.GetLength(0), B.GetLength(1)];        for (int i = 0; i < B.GetLength(0); i++)            for (int j = 0; j < B.GetLength(1); j++)                B1[i, j] = B[i, j];        for (int i = B.GetLength(0) - 1; i >= 0; i--)            int max = B[i, 0];            for (int j = 0; j < B.GetLength(1); j++)                if (B[i, j] > max)                    max = B[i, j];            B1[B1.GetLength(0) - i - 1, 3] = max;    public int[] Task_1_33(int[,] A)        int[] answer = default(int[]);        for (int i = 0; i < 5; i++)            for (int j = 0; j < A.GetLength(1); j++)                if (A[i, j] < 0)        for (int i = 0; i < A.GetLength(0); i++)            for (int j = 0; j < A.GetLength(1); j++)                if (A[i, j] < 0)        Console.WriteLine(answer.Length);        for (int i = 0; i < answer.Length; i++)            Console.Write(answer[i]);    public int[,] Task_2_8(int[,] B)        for (int i = 0; i < B.GetLength(0); i += 2)            for (int j = 0; j < B.GetLength(1); j++)                if (B[i, j] > max1)                    max1 = B[i, j];                if (B[i + 1, j] > max2)                    max2 = B[i + 1, j];
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Горохова.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Земцова.cs
    public int[,] Task_2_4(int[,] A, int[] B)        int n = A.GetLength(0);        int m = A.GetLength(1);        for (int j = 0; j < m; j++)            for (int i = 0; i < n; i++)                if (A[i, j] > amax)                    amax = A[i, j];                    imax = i;            if (amax < B[j])                A[imax, j] = B[j];    public int[,] Task_2_7(int[,] A)        int n = A.GetLength(0);        int m = A.GetLength(1);        for (int i = 0; i < n; i++)            if (A[i, i] > amax)                amax = A[i, i];                imax = i;        for (int i = 0; i < imax; i++)                A[i, j] = 0;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (n != m)        answer = new int[n * 2 - 1];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)    public int[,] Task_3_5(int[,] matrix, int k)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (matrix == null || n != m || k < 1 || k > n)        int amax = -100000, imax = 0, jmax = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (amax < Math.Abs(matrix[i, j]))                    amax = Math.Abs(matrix[i, j]);                    imax = i;                    jmax = j;        if (jmax != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[i, jmax];                matrix[i, jmax] = matrix[i, k - 1];                matrix[i, k - 1] = temp;        if (imax != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[imax, i];                matrix[imax, i] = matrix[k - 1, i];                matrix[k - 1, i] = temp;    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        answer = new int[n * n];        int[,] mA = new int[n, n];        int[,] mB = new int[n, n];        if (n <= 0 || A.Length / 2 != n || B.Length / 2 != n)        for (int i = 0; i < n; i++)            for (int j = i; j < n; j++)                mA[i, j] = A[k];                mB[i, j] = B[k];                k++;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                mA[j, i] = mA[i, j];                mB[j, i] = mB[i, j];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)    public int[,] Task_3_11(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (matrix[i, j] == 0)                    matrix[i, 0] = 0;                    break;        for (int i = 0; i < n; i++)            if (matrix[i, 0] != 0)                for (int j = 0; j < m; j++)        matrix = A;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Калина.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Мартынова.cs
    public int[,] Task_3_1(int[,] matrix)        int rows = matrix.GetLength(0), cols = matrix.GetLength(1);        int[] indexes = new int[rows], elems = new int[rows];            int min_elem = 0;            for (int j = 1; j < cols; j++)            indexes[i] = i; elems[i] = min_elem;        for (int i = 1, j = i + 1; i < rows;)            if (i == 0 || elems[i] <= elems[i - 1])                i = j;                j++;            else if (elems[i] > elems[i - 1])                int temp = elems[i];                elems[i] = elems[i - 1];                elems[i - 1] = temp;                indexes[i] = indexes[i - 1];                indexes[i - 1] = temp_index;                i--;        matrix = new_matrix;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int rows = matrix.GetLength(0), cols = matrix.GetLength(1);        int[] vector = new int[2 * rows - 1];        for (int i = rows - 1, index = 0; i >= 0; i--, index++)            int row = i, col = 0, sum_left = 0, sum_right = 0;                sum_left += matrix[row, col];            vector[index] = sum_left;            vector[2 * rows - 2 - index] = sum_right;        for (int i = 0; i < rows; i++) Console.Write(vector[i] + " ");        answer = vector;    public int[,] Task_3_5(int[,] matrix, int k)        int rows = matrix.GetLength(0), cols = matrix.GetLength(1);        int max_row = 0, max_col = 0;        k--;        for (int i = 0; i < rows; i++)            for (int j = 0; j < cols; j++)                    max_row = i;                    max_col = j;        if (max_col != k)            for (int i = 0; i < cols; i++)                int temp = matrix[i, max_col];                matrix[i, max_col] = matrix[i, k];                matrix[i, k] = temp;        if (max_row != k)            for (int j = 0; j < cols; j++)                int temp = matrix[max_row, j];                matrix[max_row, j] = matrix[k, j];                matrix[k, j] = temp;        for (int i = 0; i < rows; i++)            for (int j = 0; j < cols; j++)            Console.WriteLine();    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        int rows = A.Length, cols = B.Length;        int[,] matrix1 = new int[n, n], matrix2 = new int[n, n];        for (int i = 0, index = 0; i < n; i++)                matrix1[i, j] = A[index];                matrix1[j, i] = A[index];                matrix2[i, j] = B[index];                matrix2[j, i] = B[index];                index++;        for (int i = 0, index = 0; i < n; i++)            for (int k = 0; k < n; k++)                int s = 0;                for (int j = 0; j < n; j++)                    s += matrix1[i, j] * matrix2[j, k];                result[index] = s;                index++;        answer = result;        for (int i = 0; i < n * n; i++)    public int[,] Task_3_9(int[,] matrix)        int rows = matrix.GetLength(0), cols = matrix.GetLength(1);        int[] indexes = new int[cols], negative_counts = new int[cols];        int[,] new_matrix = new int[rows, cols];        for (int j = 0; j < cols; j++)            int cnt = 0;            for (int i = 0; i < rows; i++)                if (matrix[i, j] < 0) cnt++;            indexes[j] = j; negative_counts[j] = cnt;        for (int i = 1, j = i + 1; i < cols;)            if (i == 0 || negative_counts[i] >= negative_counts[i - 1])                i = j;                j++;            else if (negative_counts[i] < negative_counts[i - 1])                int temp = negative_counts[i];                negative_counts[i] = negative_counts[i - 1];                negative_counts[i - 1] = temp;                int temp_index = indexes[i];                indexes[i] = indexes[i - 1];                indexes[i - 1] = temp_index;                i--;        for (int i = 0; i < cols; i++) Console.Write(negative_counts[i] + " ");        for (int j = 0; j < cols; j++)            for (int i = 0; i < rows; i++)                new_matrix[i, j] = matrix[i, indexes[j]];        matrix = new_matrix;    public int[,] Task_3_11(int[,] matrix)        int rows = matrix.GetLength(0), cols = matrix.GetLength(1), count_0 = 0;        int[] indexes = new int[rows];        for (int i = 0, index = 0; i < rows; i++)            bool flag = true;                    count_0++;                    flag = false;                    break;            if (!flag) indexes[index++] = i;        int[,] new_matrix = new int[rows - count_0, cols];        for (int i = 0, index = 0; i < rows; i++)            if (i == indexes[index]) index++;        matrix = new_matrix;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Литвин.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Ролдугин.cs
    public int[,] Task_2_9(int[,] A)        for (int i = 0; i < 6; i++)    #region Level 3    public int[,] Task_3_1(int[,] matrix)    public int[,] Task_3_2(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0); i++)            matrix[0, i] = 0;            matrix[i, 0] = 0;            matrix[i, matrix.GetLength(0) - 1] = 0;            matrix[matrix.GetLength(0) - 1, i] = 0;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);    public int[,] Task_3_4(int[,] matrix)        int strok = matrix.GetLength(0);        int stolb = matrix.GetLength(1);        for (int i = strok / 2 - 1 + strok % 2; i < strok; i++)            for (int g = 0; g <= i; g++)                matrix[i, g] = 1;    public int[,] Task_3_5(int[,] matrix, int k)    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int f = 0, k = 0;        upper = new int[matrix.GetLength(0) * (matrix.GetLength(0) - 1) / 2];        int[] lower = default(int[]);        lower = new int[matrix.GetLength(0) * (matrix.GetLength(0) - 1) / 2 + matrix.GetLength(0)];        for (int i = 0; i < matrix.GetLength(0); i++)            for (int g = 0; g < matrix.GetLength(1); g++)                if (i > g) upper[f++] = matrix[i, g];                else lower[k++] = matrix[i, g];    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);    public int[,] Task_3_8(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0) - 1; i++)            for (int j = 0; j < matrix.GetLength(0) - i - 1; j++)                if (count_elements(j, matrix) < count_elements(j + 1, matrix))                    for (int s = 0; s < matrix.GetLength(1); s++)                        int templ = matrix[j, s];                        matrix[j, s] = matrix[j + 1, s];                        matrix[j + 1, s] = templ;    int count_elements(int strok, int[,] matrix)        int count = 0;        for (int i = 0; i < matrix.GetLength(1); i++)            if (matrix[strok, i] > 0) count++;    public int[,] Task_3_9(int[,] matrix)    public int[,] Task_3_10(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0); i++)            if (i % 2 == 0)                for (int j = 0; j < matrix.GetLength(1) - 1; j += 1)                    for (int j1 = 0; j1 < matrix.GetLength(1) - j - 1; j1 += 1)                        if (matrix[i, j1] < matrix[i, j1 + 1])                            int t = matrix[i, j1];                            matrix[i, j1] = matrix[i, j1 + 1];                            matrix[i, j1 + 1] = t;            if (i % 2 != 0)                for (int j = 0; j < matrix.GetLength(1) - 1; j += 1)                    for (int j1 = 0; j1 < matrix.GetLength(1) - j - 1; j1 += 1)                        if (matrix[i, j1] > matrix[i, j1 + 1])                            int t = matrix[i, j1];                            matrix[i, j1] = matrix[i, j1 + 1];                            matrix[i, j1 + 1] = t;    public int[,] Task_3_11(int[,] matrix)        int count = 0;        for (int i = 0; i < matrix.GetLength(0); i++)            for (int j = 0; j < matrix.GetLength(1); j++)                if (matrix[i, j] == 0)                    count++;                    break;        Console.WriteLine(count);        int s = 0;        int[,] new_matrix = new int[matrix.GetLength(0) - count, matrix.GetLength(1)];        for (int i = 0; i < matrix.GetLength(0); i++)            bool flag = true;            for (int j = 0; j < matrix.GetLength(1); j++)                new_matrix[s, j] = matrix[i, j];                if (matrix[i, j] == 0)                    flag = false;                    break;            Console.WriteLine(s);            if (s == new_matrix.GetLength(0) - 1) break;            if (flag) s++;        PrintMatrix(new_matrix);    public int[,] Task_3_2(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0); i++)            matrix[0, i] = 0;            matrix[i, 0] = 0;            matrix[i, matrix.GetLength(0) - 1] = 0;            matrix[matrix.GetLength(0) - 1, i] = 0;    public int[,] Task_3_4(int[,] matrix)        int strok = matrix.GetLength(0);        int stolb = matrix.GetLength(1);        for (int i = strok / 2 - 1 + strok % 2; i < strok; i++)            for (int g = 0; g <= i; g++)                matrix[i, g] = 1;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int f = 0, k = 0;        upper = new int[matrix.GetLength(0) * (matrix.GetLength(0) - 1) / 2];        int[] lower = default(int[]);        lower = new int[matrix.GetLength(0) * (matrix.GetLength(0) - 1) / 2 + matrix.GetLength(0)];        for (int i = 0; i < matrix.GetLength(0); i++)            for (int g = 0; g < matrix.GetLength(1); g++)                if (i > g) upper[f++] = matrix[i, g];                else lower[k++] = matrix[i, g];    public int[,] Task_3_8(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0) - 1; i++)            for (int j = 0; j < matrix.GetLength(0) - i - 1; j++)                if (count_elements(j, matrix) < count_elements(j + 1, matrix))                    for (int s = 0; s < matrix.GetLength(1); s++)                        int templ = matrix[j, s];                        matrix[j, s] = matrix[j + 1, s];                        matrix[j + 1, s] = templ;    int count_elements(int strok, int[,] matrix)        int count = 0;        for (int i = 0; i < matrix.GetLength(1); i++)            if (matrix[strok, i] > 0) count++;    public int[,] Task_3_10(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0); i++)            if (i % 2 == 0)                for (int j = 0; j < matrix.GetLength(1) - 1; j += 1)                    for (int j1 = 0; j1 < matrix.GetLength(1) - j - 1; j1 += 1)                        if (matrix[i, j1] < matrix[i, j1 + 1])                            int t = matrix[i, j1];                            matrix[i, j1] = matrix[i, j1 + 1];                            matrix[i, j1 + 1] = t;            if (i % 2 != 0)                for (int j = 0; j < matrix.GetLength(1) - 1; j += 1)                    for (int j1 = 0; j1 < matrix.GetLength(1) - j - 1; j1 += 1)                        if (matrix[i, j1] > matrix[i, j1 + 1])                            int t = matrix[i, j1];                            matrix[i, j1] = matrix[i, j1 + 1];                            matrix[i, j1 + 1] = t;    public int[,] Task_3_11(int[,] matrix)        int count = 0;        for (int i = 0; i < matrix.GetLength(0); i++)            for (int j = 0; j < matrix.GetLength(1); j++)                if (matrix[i, j] == 0)                    count++;                    break;        Console.WriteLine(count);        int s = 0;        int[,] new_matrix = new int[matrix.GetLength(0) - count, matrix.GetLength(1)];        for (int i = 0; i < matrix.GetLength(0); i++)            bool flag = true;            for (int j = 0; j < matrix.GetLength(1); j++)                new_matrix[s, j] = matrix[i, j];                if (matrix[i, j] == 0)                    flag = false;                    break;            Console.WriteLine(s);            if (s == new_matrix.GetLength(0) - 1) break;            if (flag) s++;        PrintMatrix(new_matrix);
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Лоскутова.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Малаховский.cs
    public double Task_1_2(int[,] A)        double answer = 0;        int count = 0;        for (int i = 0; i < A.GetLength(0); i++)            for (int j = 0; j < A.GetLength(1); j++)                if (A[i, j] > 0)                    count++;    public (int, int) Task_1_5(int[,] A, int colIndex)        int value = 0, rowIndex = -1;        for (int i = 0; i < A.GetLength(0); i++)            if (A[i, colIndex] < 0)                value = A[i, colIndex];                rowIndex = i;                break;    public int[] Task_1_14(int[,] A)        int[] answer = new int[A.GetLength(1)];        for (int i = 0; i < A.GetLength(1); i++)            int count = 0;            for (int j = 0; j < A.GetLength(0); j++)            answer[i] = count;    public int[,] Task_1_17(int[,] B, int n, int m)        int[,] A = new int[n, m];        for (int i = 0; i < B.GetLength(0); i++)            int count = 0;            for (int j = 0; j < B.GetLength(1); j++)                    count = j;            for (int j = 0; j < B.GetLength(1); j++)                if (j < count)                    A[i, j + 1] = B[i, j];                else if (j > count)                    A[i, j] = B[i, j];    public int[,] Task_1_23(int[,] G)        int[,] A = new int[G.GetLength(0), G.GetLength(1)];        for (int i = 0; i < G.GetLength(0); i++)            int count = 0;            for (int j = 0; j < G.GetLength(1); j++)                    count = j;            for (int j = 0; j < G.GetLength(1); j++)                if (j < count)                    A[i, j] = G[i, j];                if (j > count + 1)                    A[i, j] = G[i, j - 1];    public int[,] Task_1_29(int[,] F)        int[,] A = new int[F.GetLength(0), F.GetLength(1) - 1];        int minn = Math.Abs(F[1, 0]);        int jmin = 0;        for (int j = 0; j < F.GetLength(1); j++)            if (Math.Abs(F[1, j]) < minn)                minn = Math.Abs(F[1, j]);                jmin = j;        for (int i = 0; i < F.GetLength(0); i++)            for (int j = 0; j < F.GetLength(1); j++)                if (j <= jmin)                    A[i, j] = F[i, j];                else if (j > jmin + 1)                    A[i, j - 1] = F[i, j];    public double[,] Task_1_32(double[,] A)        for (int i = 0; i < A.GetLength(0); i++)            int jmax = 0;            for (int j = 0; j < A.GetLength(1); j++)                    jmax = j;                if (A[i, j] > 0)                    count++;            else    public int[,] Task_2_6(int n)        int[,] answer = new int[n, 3 * n];        double count = 0;        for (int i = 0; i < answer.GetLength(0); i++)            for (int j = 0; j < answer.GetLength(1); j++)                if (j == count || j == n + i || j == 2 * n + i)                    answer[i, j] = 1;                else                    answer[i, j] = 0;            count++;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Мещеряков.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Чечётин.cs
    public int Task_1_3(int[,] A)        int answer = 0;        int j =  A.GetLength(0) - 1;        for (int i = 0; i < A.GetLength(0); i++, j--)                answer += A[i, j];            answer += A[i, i];    public int[] Task_1_6(int[,] A)        int[] answer = default(int[]);        answer = new int[A.GetLength(0)];        int maxElem;        int indexMaxElem = 0;        for (int i = 0; i < A.GetLength(0); i++)            maxElem = A[i, 0];            for(int j = 0; j < A.GetLength(1); j++)                if (maxElem > A[i, j])                    maxElem = A[i, j];                    indexMaxElem = j;            answer[i] = indexMaxElem;    public int[,] Task_1_9(int[,] A)        if (A.GetLength(0) != 4 && A.GetLength(1) != 7)        int [] answer = new int[A.GetLength(0)];        int maxElem;        int indexMaxElem = 0;        for (int i = 0; i < A.GetLength(0); i++)            maxElem = A[i, 0];            for(int j = 0; j < A.GetLength(1); j++)                if (maxElem < A[i, j])                    maxElem = A[i, j];                    indexMaxElem = j;            answer[i] = indexMaxElem;        for(int i = 0; i < answer.Length; i++)            int temp = A[i, 0];            A[i, 0] = A[i, answer[i]];            A[i, answer[i]] = temp;    public int[,] Task_1_12(int[,] A)        if (A.GetLength(0) != 6 || A.GetLength(1) != 7)        int n = A.GetLength(0), m = A.GetLength(1);        int maxElem = int.MinValue;        int indexRow = -1, indexColum = -1;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (A[i, j] > maxElem)                    maxElem = A[i, j];                    indexRow = i;                    indexColum = j;        int[,] answer = new int[n - 1, m - 1];        for (int i = 0, newRow = 0; i < n; i++)            if (i == indexRow) continue;            for (int j = 0, newCol = 0; j < m; j++)                if (j == indexColum) continue;                answer[newRow, newCol] = A[i, j];                newCol++;            newRow++;        A = answer;    public int[,] Task_1_15(int[,] A)        if (A.GetLength(0) != 5 && A.GetLength(1) != 7)        int [] indekMaxElements = new int[A.GetLength(0)];        int maxElem;        int indexMaxElem = 0;        for (int i = 0; i < A.GetLength(0); i++)            maxElem = A[i, 0];            for(int j = 0; j < A.GetLength(1); j++)                if (maxElem < A[i, j])                    maxElem = A[i, j];                    indexMaxElem = j;            indekMaxElements[i] = indexMaxElem;            indexMaxElem = 0;        for(int i = 0; i < indekMaxElements.Length; i++)            A[i, indekMaxElements[i]] *= i + 1;    public int[,] Task_1_21(int[,] H)        if (H.GetLength(0) != 5 || H.GetLength(1) != 7)        int n = H.GetLength(0);        int m = H.GetLength(1);        int [] maxElemCol = new int[n];        for (int i = 0; i < n; i++)            int maxElem = int.MinValue;            for (int j = 0; j < m; j++)                if (maxElem < H[i, j])                    maxElem = H[i, j];            maxElemCol[i] = maxElem;        for (int i = 0; i < n; i++)            int temp =  H[i, m - 2];            H[i, m - 2] = maxElemCol[i];            H[i, m - 1] = temp;public double[,] Task_1_24(double[,] Y)    int n = Y.GetLength(0);    int m = Y.GetLength(1);    double[] averages = new double[n];     for (int i = 0; i < n; i++)        double max = double.MinValue;        int maxIndex = -1;        for (int j = 0; j < m; j++)            if (Y[i, j] > max)                max = Y[i, j];                maxIndex = j;        double sum = 0;        int count = 0;        for (int j = maxIndex + 1; j < m; j++)            if (Y[i, j] > 0)                sum += Y[i, j];                count++;        if (count == 0)            averages[i] = 0;        else            averages[i] = Math.Round(sum / count, 2);        for (int j = 0; j < maxIndex; j++)            if (Y[i, j] < 0)                Y[i, j] = averages[i];    public int[,] Task_1_27(int[,] B)        if (B.GetLength(0) != 5 || B.GetLength(1) != 7)        int n = B.GetLength(0);        int m = B.GetLength(1);        int[] maxElem = new int[n];        int count = n - 1;        for (int i = 0; i < n; i++)            int max = int.MinValue;            for (int j = 0; j < m; j++)                if (max < B[i, j])                    max = B[i, j];            maxElem[i] = max;        for (int i = 0; i < n; i++)            B[i, 3] = maxElem[count];            count--;    public int[,] Task_1_30(int[,] B)        if (B.GetLength(0) != 5 || B.GetLength(1) != 5)        int n = B.GetLength(0);        int m = B.GetLength(1);        double maxElem = double.MinValue;        int indexMaxElem = -1, indexMinElem = -1;        for(int i = 0; i < n; i++)            if (B[i,i] > maxElem)                maxElem = B[i, i];                indexMaxElem = i;        for(int i = 0; i < n; i++)            if(B[i,2] < 0)                indexMinElem = i;                break;        for(int i = 0; i < n; i++)            int temp = B[indexMaxElem, i];            B[indexMaxElem, i] = B[indexMinElem, i];            B[indexMinElem, i] = temp;    public int[] Task_1_33(int[,] A)        int[] answer = default(int[]);        if (A.GetLength(0) != 5 || A.GetLength(1) != 7)        int n = A.GetLength(0);        int m = A.GetLength(1);        int count = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (A[i, j] < 0)                    count++;        answer = new int[count];        count = 0;        for(int i = 0; i < n; i++)            for(int j = 0; j < m; j++)                if (A[i, j] < 0)                    answer[count] = A[i, j];                    count++;    public double[,] Task_2_1(double[,] A)        if (A.GetLength(0) != 5 || A.GetLength(1) != 7)        double n = A.GetLength(0);        double m = A.GetLength(1);        for(int i = 0; i < n; i++)            double maxElem = int.MinValue;            for(int j = 0; j < m; j++)                if(A[i,j] > maxElem)                    maxElem = A[i, j];            for(int j = 0; j < m; j++)                if(A[i,j] == maxElem && j != 0 && j != m - 1)                    if(A[i,j + 1] < A[i,j - 1])                        j++;                    else                        j--;                    if (A[i,j] > 0)                        A[i,j] *= 2;                    else                        A[i,j] /= 2;                    break;    #endregion    public int[,] Task_2_3(int[,] A)        int n = A.GetLength(0);        int m = A.GetLength(1);        for(int j = 0; j < m; j++)            int maxElem = int.MinValue;            int indexMaxElem = -1;            for(int i = 0; i < n; i++)                if(A[i, j] > maxElem)                    maxElem = A[i, j];                    indexMaxElem = i;            if (indexMaxElem < n/2)                int sum = 0;                for(int i = indexMaxElem + 1; i < n; i++)                    sum += A[i, j];                A[0,j] = sum;    public int[,] Task_2_4(int[,] A, int[] B)        if (A.GetLength(0) != 7 || A.GetLength(1) != 5 || B.Length != 5)        int n = A.GetLength(0);        int m = A.GetLength(1);        for(int j = 0; j < m; j++)            int maxElem = int.MinValue;            int maxIndex = -1;            for(int i = 0; i < n; i++)                if(A[i, j] > maxElem)                    maxElem = A[i, j];                    maxIndex = i;            if(A[maxIndex, j] < B[j])                A[maxIndex, j] = B[j];    public int[,] Task_2_6(int n)        int[,] answer = default(int[,]);        if(n < 0)        answer = new int[n, n * 3];        for(int i = 0; i < n; i++)            for(int j = 0; j < n * 3; j++)                answer[i, j] = 0;        for(int i = 0; i < n; i++)            answer[i, i] = 1;            answer[i, n + i] = 1;            answer[i, 2 * n + i] = 1;    public int[,] Task_2_7(int[,] A)        if (A.GetLength(0)!= 6 || A.GetLength(1)!= 6)        int n = A.GetLength(0);        int m = A.GetLength(1);        int maxElem = int.MinValue;        int indexElem = -1;        for(int i = 0; i < n; i++)            if(A[i,i] > maxElem)                maxElem = A[i,i];                indexElem = i;        int test = 0;        for(int i = 0; i < n; i++)            test = i;            if(test == indexElem) break;               for(int j = 0; j < m; j++)                if(j > i)                    A[i, j] = 0;       public int[,] Task_2_8(int[,] B)        if (B.GetLength(0)!= 6 || B.GetLength(1)!= 6)        int n = B.GetLength(0);        int m = B.GetLength(1);        for(int i = 0; i < n; i+=2)            int firstMaxElem = int.MinValue, secMaxElem = int.MinValue;            int firstMaxIndex = -1, secMaxIndex = -1;            int temp = 0;            for(int j = 0; j < m; j++)                if(firstMaxElem < B[i,j])                    firstMaxElem = B[i,j];                    firstMaxIndex = j;                if(secMaxElem < B[i + 1, j])                    secMaxElem = B[i + 1, j];                    secMaxIndex = j;            temp = firstMaxElem;            B[i, firstMaxIndex] = secMaxElem;            B[i + 1, secMaxIndex] = temp;    public int[,] Task_3_1(int[,] matrix)        if(matrix.GetLength(0) != 7 || matrix.GetLength(1) != 5)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int[] minElems = new int[n];        int[] minElemIndexes = new int[n];        for (int i = 0; i < n; i++)            int minElem = int.MaxValue;            minElemIndexes[i] = i;             for (int j = 0; j < m; j++)                if (matrix[i, j] < minElem)                    minElem = matrix[i, j];            minElems[i] = minElem;        for (int i = 1; i < n; i++)            int key = minElems[i];            int indexKey = minElemIndexes[i];            int j = i - 1;            while (j >= 0 && minElems[j] < key)                 minElems[j + 1] = minElems[j];                minElemIndexes[j + 1] = minElemIndexes[j];                j -= 1;            minElems[j + 1] = key;            minElemIndexes[j + 1] = indexKey;        int[,] sortedMatrix = new int[n, m];        for (int i = 0; i < n; i++)            int originalRowIndex = minElemIndexes[i];            for (int j = 0; j < m; j++)                sortedMatrix[i, j] = matrix[originalRowIndex, j];        matrix = sortedMatrix;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        if(matrix.GetLength(0) != matrix.GetLength(1))        int n = matrix.GetLength(0);        answer = new int[n * 2 - 1];        for(int i = 0; i < n; i++)            for(int j = 0; j < n; j++)                int index = j - i + (n - 1);                answer[index] += matrix[i, j];
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Нафикова.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Таровик.cs
    public (int, int) Task_1_4(int[,] A)        int row = 0, col = 0;                if (A[i, j] < min)                    min = A[i, j];                    row = i;                    col = j;    public int[] Task_1_7(int[,] A)        int[] answer = default(int[]);        answer= new int[A.GetLength(1)];        for ( int j = 0; j< A.GetLength(1); j++)            for (int i = 0; i < A.GetLength(0); i++)            k++;    public int[,] Task_1_10(int[,] A)                if (A[i, 2] > max)                    max = A[i, 2];                    ii = i;        for (int j = 0; j < m; j++)            p = A[3, j];            A[3, j] = A[ii, j];    public int[,] Task_1_13(int[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        int max = -1000000, ii = 0, p = 0;        for (int i = 1; i < n; i++)            if (A[i, i] > max)                max = A[i, i];                ii = i;            p = A[j, 3];            A[j, 3] = A[j, ii];            A[j, ii] = p;    public double[,] Task_1_22(double[,] Z)        int n = Z.GetLength(0), m = Z.GetLength(1);                if ((Z[i, j] > max))                    max = Z[i, j];                    jj = j;                    ii = i;                if (Z[i, j] > 0)                    s += Z[i, j];                    k++;        Z[ii, jj] = s / k;    public int[,] Task_1_25(int[,] X)        for (int i = 0; i < n; i++)            int max = 0, min = 0;            for (int j = 0; j < m; j++)                    max++;                    min++;            if (max > maxn)                maxn = max;                mini = i;            if (min < minn)                minn = min;                maxi = i;            X[maxi, j] = p;    public int[,] Task_1_28(int[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        int maxsum = -1, maxsumi = -1;        for (int i = 0; i < n; i++)            int sum = 0;            for (int j = 0; j < m; j++)                if (A[i, j] > 0)                    sum += A[i, j];            if (sum > maxsum)                maxsum = sum;                maxsumi = i;        int[,] newA = new int[n - 1, m];        int k = 0;        for (int i = 0; i < n; i++)            if (i == maxsumi)                k++;                continue;            for (int j = 0; j < m; j++)                newA[i - k, j] = A[i, j];        A = newA;    public int[,] Task_1_31(int[,] A, int[] B)        int n = A.GetLength(0), m = A.GetLength(1);        int mini = A[4, 0], minj = 0;                mini = A[4, j];                minj = j;        for (int j = m - 1; j > minj + 1; j--)            for (int i = 0; i < n; i++)        for (int i = 0; i < n; i++)    public int[,] Task_2_3(int[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        for (int j = 0; j < m; j++)            for (int i = 0; i < n; i++)                if (A[i, j] > max)                    max = A[i, j];                    sum += A[i, j];                A[0, j] = sum;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Нечипас.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Таровик.cs
    public double[,] Task_2_1(double[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        if (n != 5 || m != 7)        for (int i = 0; i < n; i++)            double max = double.MinValue;            int jmax = 0;            for (int j = 0; j < m; j++)                if (A[i, j] > max)                    max = A[i, j];                    jmax = j;            if (jmax == 0 || A[i, jmax - 1] > A[i, jmax + 1])                if (A[i, jmax + 1] > 0)                    A[i, jmax + 1] *= 2;                else if (A[i, jmax + 1] < 0)                    A[i, jmax + 1] /= 2;            else if (jmax == m - 1 || A[i, jmax - 1] < A[i, jmax + 1])                if (A[i, jmax - 1] > 0)                    A[i, jmax - 1] *= 2;                else if (A[i, jmax - 1] < 0)                    A[i, jmax - 1] /= 2;    #endregion    public int[,] Task_2_3(int[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        if (n != 10 || m != 5)        for (int j = 0; j < m; j++)            int max = int.MinValue, imax = 0;            for (int i = 0; i < n; i++)                if (A[i, j] > max)                    max = A[i, j];                    imax = i;            if (imax < (n / 2))                int sum = 0;                for (int i = imax + 1; i < n; i++)                    sum += A[i, j];                A[0, j] = sum;    public double[,] Task_2_5(double[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        if (n != 7 || m != 5)        for (int j = 0; j < m; j++)            double max = double.MinValue;            int imax = 0;            for (int i = 0; i < n; i++)                if (A[i, j] > max)                    max = A[i, j];                    imax = i;            double p = (A[0, j] + A[n - 1, j]) / 2;    public int[,] Task_2_8(int[,] B)        int n = B.GetLength(0), m = B.GetLength(1), max1 = int.MinValue, imax1 = -1, max2 = int.MinValue, imax2 = -1;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (i % 2 == 0)                    if (B[i, j] > max1)                if (i % 2 != 0)            if (i % 2 != 0)                B[i - 1, imax1] = max2;                B[i, imax2] = max1;                max1 = max2 = int.MinValue;                imax1 = imax2 = 0;    public int[,] Task_2_9(int[,] A)        for (int i = 0; i < n; i++)    #region Level 3    public int[,] Task_3_1(int[,] matrix)        int n = matrix.GetLength(0), m = matrix.GetLength(1);        int[,] newmatrix = new int[n, 2];        const int min = int.MaxValue;        for (int i = 0; i < n; i++)            newmatrix[i, 0] = i;            newmatrix[i, 1] = min;            for (int j = 0; j < m; j++)                if (matrix[i, j] < newmatrix[i, 1])                    newmatrix[i, 1] = matrix[i, j];        for (int i = 1, j = 2; i < n;)            else                int temp = newmatrix[i, 1],                itemp = newmatrix[i, 0],                inext = newmatrix[i - 1, 0];                for (int k = 0; k < m; k++)                    int temp1 = matrix[i, k];                    matrix[i, k] = matrix[i - 1, k];                    matrix[i - 1, k] = temp1;                newmatrix[i, 1] = newmatrix[i - 1, 1];                newmatrix[i, 0] = newmatrix[i - 1, 0];                newmatrix[i - 1, 1] = temp;                newmatrix[i - 1, 0] = itemp;                i--;    public int[,] Task_3_2(int[,] matrix)    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int n = matrix.GetLength(0), m = matrix.GetLength(1);        answer = new int[n * 2 - 1];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int index = j - i + n - 1;                answer[index] += matrix[i, j];    public int[,] Task_3_4(int[,] matrix)    public int[,] Task_3_5(int[,] matrix, int k)        int n = matrix.GetLength(0), m = matrix.GetLength(1);        if (n != m || k < 1)         for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (Math.Abs(matrix[i, j]) > Math.Abs(matrix[max[0], max[1]]))                     max[0] = i;                     max[1] = j;        if (max[1] != k - 1)            for (int j = 0; j < n; j++)                int temp = matrix[max[0], j];                matrix[max[0], j] = matrix[k - 1, j];                matrix[k - 1, j] = temp;        if (max[0] != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[i, max[1]];                matrix[i, max[1]] = matrix[i, k - 1];                matrix[i, k - 1] = temp;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int[] lower = default(int[]);    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        int[,] matrix1 = new int[n, n], matrix2 = new int[n, n];        for (int i = 0; i < n; i++)            for (int j = i; j < n; j++)                matrix1[i, j] = A[index];                matrix2[i, j] = B[index];                matrix1[j, i] = A[index];                matrix2[j, i] = B[index];                index++;        int[] matrix3 = new int[n * n];        int index3 = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                for (int k = 0; k < n; k++)                    matrix3[index3] += matrix1[i, k] * matrix2[k, j];                index3++;        answer = matrix3;    public int[,] Task_3_8(int[,] matrix)    public int[,] Task_3_9(int[,] matrix)        if (matrix == null || matrix.GetLength(0) != 5 || matrix.GetLength(1) != 7)        bool an;        for (int i = 0; i < matrix.GetLength(1); i++)            an = false;            for (int j = 0; j < matrix.GetLength(1) - 1; j++)                for (int z = 0; z < matrix.GetLength(0); z++)                    if (matrix[z, j] < 0)                        ci++;                    if (matrix[z, j + 1] < 0)                        cj++;                if (ci > cj)                    for (int z = 0; z < matrix.GetLength(0); z++)                        int temp = matrix[z, j];                        matrix[z, j] = matrix[z, j + 1];                        matrix[z, j + 1] = temp;                    an = true;            if (an == false)                break;    public int[,] Task_3_10(int[,] matrix)    public int[,] Task_3_11(int[,] matrix)        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (matrix[i, j] == 0)                    break;            for (int j = 0; j < m; j++)                if (matrix[i, j] == 0)                    break;            for (int j = 0; j < m; j++)    public int[,] Task_3_1(int[,] matrix)        int n = matrix.GetLength(0), m = matrix.GetLength(1);        int[,] newmatrix = new int[n, 2];        const int min = int.MaxValue;        for (int i = 0; i < n; i++)            newmatrix[i, 0] = i;            newmatrix[i, 1] = min;            for (int j = 0; j < m; j++)                if (matrix[i, j] < newmatrix[i, 1])                    newmatrix[i, 1] = matrix[i, j];        for (int i = 1, j = 2; i < n;)            else                int temp = newmatrix[i, 1],                itemp = newmatrix[i, 0],                inext = newmatrix[i - 1, 0];                for (int k = 0; k < m; k++)                    int temp1 = matrix[i, k];                    matrix[i, k] = matrix[i - 1, k];                    matrix[i - 1, k] = temp1;                newmatrix[i, 1] = newmatrix[i - 1, 1];                newmatrix[i, 0] = newmatrix[i - 1, 0];                newmatrix[i - 1, 1] = temp;                newmatrix[i - 1, 0] = itemp;                i--;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int n = matrix.GetLength(0), m = matrix.GetLength(1);        answer = new int[n * 2 - 1];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int index = j - i + n - 1;                answer[index] += matrix[i, j];    public int[,] Task_3_5(int[,] matrix, int k)        int n = matrix.GetLength(0), m = matrix.GetLength(1);        if (n != m || k < 1)         for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (Math.Abs(matrix[i, j]) > Math.Abs(matrix[max[0], max[1]]))                     max[0] = i;                     max[1] = j;        if (max[1] != k - 1)            for (int j = 0; j < n; j++)                int temp = matrix[max[0], j];                matrix[max[0], j] = matrix[k - 1, j];                matrix[k - 1, j] = temp;        if (max[0] != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[i, max[1]];                matrix[i, max[1]] = matrix[i, k - 1];                matrix[i, k - 1] = temp;    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        int[,] matrix1 = new int[n, n], matrix2 = new int[n, n];        for (int i = 0; i < n; i++)            for (int j = i; j < n; j++)                matrix1[i, j] = A[index];                matrix2[i, j] = B[index];                matrix1[j, i] = A[index];                matrix2[j, i] = B[index];                index++;        int[] matrix3 = new int[n * n];        int index3 = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                for (int k = 0; k < n; k++)                    matrix3[index3] += matrix1[i, k] * matrix2[k, j];                index3++;        answer = matrix3;    public int[,] Task_3_9(int[,] matrix)        if (matrix == null || matrix.GetLength(0) != 5 || matrix.GetLength(1) != 7)        bool an;        for (int i = 0; i < matrix.GetLength(1); i++)            an = false;            for (int j = 0; j < matrix.GetLength(1) - 1; j++)                for (int z = 0; z < matrix.GetLength(0); z++)                    if (matrix[z, j] < 0)                        ci++;                    if (matrix[z, j + 1] < 0)                        cj++;                if (ci > cj)                    for (int z = 0; z < matrix.GetLength(0); z++)                        int temp = matrix[z, j];                        matrix[z, j] = matrix[z, j + 1];                        matrix[z, j + 1] = temp;                    an = true;            if (an == false)                break;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Полякова.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Соков.cs
    public double Task_1_2(int[,] A)        double answer = 0;        int AHeight = A.GetLength(0), AWeight = A.GetLength(1), cntPos = 0;        double sum = 0;                    sum += A[i, j];                    cntPos++;        if (cntPos == 0 || AHeight <= 0)            answer = 0;        else            answer = sum / cntPos;    public int Task_1_3(int[,] A)        int answer = 0;        int sumValue = 0, AHeight = A.GetLength(0), AWeight = A.GetLength(1);        //         if (i == j || Math.Abs(j - i) == AWeight)        //             sumValue += A[i, j];            if (i + j == i + i)                sumValue += A[i, j];            sumValue += A[i, i];        answer = sumValue;    public (int, int) Task_1_5(int[,] A, int colIndex)        int value = 0, rowIndex = -1;        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight == 0 || colIndex > AHeight || colIndex < 0)                value = A[i, colIndex];                rowIndex = i;                break;        if (value == 0)    public double[] Task_1_8(int[,] A)        double[] answer = default(double[]);        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        int k = 0;            double sumPos = 0;            int cntPos = 0;                    sumPos += A[i, j];                    cntPos++;                answer[i] = sumPos / cntPos;                k++;            else                answer[i] = 0;        if (k == 0)    public int[,] Task_1_11(int[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight <= 2)        int minValue = A[0, 0], delString = 0;                minValue = A[i, 0];                delString = i;        int[,] newA = new int[AHeight - 1, AWeight];                if (i < delString)                    newA[i, j] = A[i, j];                else                    newA[i, j] = A[i + 1, j];        A = newA;    public int[] Task_1_14(int[,] A)        int[] answer = default(int[]);        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        int countReplace = 0;            int countPos = 0;                    countPos++;                    countReplace++;            answer[j] = countPos;        if (countReplace == 0)    public double[,] Task_1_20(double[,] F, int n, int m)        int AHeight = F.GetLength(0), AWeight = F.GetLength(1);            double maxValue = F[i, 0], firstDif = 0, lastDif = 0;            int indMax = 0;                    maxValue = F[i, j];                    indMax = j;                if (F[i, j] < 0 && firstDif == 0)                    firstDif = F[i, j];                if (F[i, j] < 0 && firstDif != 0)                    lastDif = F[i, j];            if (firstDif != 0 || lastDif != 0)                F[i, indMax] = (lastDif + firstDif) / 2;    public int[,] Task_1_26(int[,] A, int[] B)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1), vectorLenght = B.Length;        int column = 6 - 1;        if (AHeight < 3 || AWeight != vectorLenght)        int maxValue = A[0, column];        int delString = 0;                maxValue = A[i, column];                delString = i;            A[delString, j] = B[j];    public int[,] Task_1_29(int[,] F)        int AHeight = F.GetLength(0), AWeight = F.GetLength(1);        if (AHeight < 3)        int minValue = F[1, 0];        int delColumn = 0;                minValue = F[1, j];                delColumn = j;        delColumn++;        int[,] G = new int[AHeight, AWeight - 1];                if (j < delColumn)                    G[i, j] = F[i, j];                    G[i, j] = F[i, j + 1];        F = G;    public double[,] Task_1_32(double[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight < 3)            int indMax = 0, countPos = 0;            double maxValue = A[i, 0], sumPos = 0, avg = 0;                    maxValue = A[i, j];                    indMax = j;                    countPos++;                    sumPos += A[i, j];                if (countPos != 0)                    avg = sumPos / countPos;            A[i, indMax] = avg;    public double[,] Task_2_1(double[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight < 3)            double maxValue = A[i, 0];            int indMax = 0;                    indMax = j;                    maxValue = A[i, j];            if (indMax == 0)                A[i, indMax + 1] *= 2;            else if (indMax == AWeight - 1)                A[i, indMax - 1] *= 2;                    if (A[i, indMax + 1] > 0)                        A[i, indMax + 1] *= 2;                    else                        A[i, indMax + 1] /= 2;                    if (A[i, indMax - 1] > 0)                        A[i, indMax - 1] *= 2;                    else                        A[i, indMax - 1] /= 2;    #endregion    public int[,] Task_2_2(int[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight < 3)            int countPos = 0, countDif = 0;            int maxValue = A[0, j], indMax = 0;                    maxValue = A[i, j];                    indMax = i;                if (A[i, j] > 0)                    countPos++;                else if (A[i, j] != 0)                    countDif++;            if (countPos > countDif)                A[indMax, j] = 0;            else                A[indMax, j] = indMax + 1;    public int[,] Task_2_3(int[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight < 3)            int maxValue = A[0, j], indMax = 0;            int sum = 0;                    indMax = i;                    maxValue = A[i, j];                    sum = 0;            if (indMax <= AHeight / 2)                A[0, j] = sum;    public int[,] Task_2_4(int[,] A, int[] B)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1), BLenght = B.Length;        if (AHeight < 3 || BLenght != AWeight)            int maxValue = A[0, j], indMax = 0;                    maxValue = A[i, j];                    indMax = i;            if (A[indMax, j] < B[j])                A[indMax, j] = B[j];    public double[,] Task_2_5(double[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight < 3)            double maxValue = A[0, j];            int indMax = 0;            double sum = (A[0, j] + A[AHeight - 1, j]) / 2;                    indMax = i;                    maxValue = A[i, j];            if (maxValue < sum)                A[indMax, j] = sum;            else                A[indMax, j] = indMax + 1;    public int[,] Task_2_6(int n)        int[,] answer = default(int[,]);        if (n < 3)                if (i == j || i == j - 3 || i == j - 6)                    A[i, j] = 1;                    A[i, j] = 0;        answer = A;    public int[,] Task_2_7(int[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight < 3 || AHeight != AWeight)        int maxValue = A[0, 0], iMax = 0;                iMax = i;                maxValue = A[i, i];                if (j > i)                    A[i, j] = 0;    public int[,] Task_2_8(int[,] B)        int BHeight = B.GetLength(0), BWeight = B.GetLength(1);        if (BHeight < 3)            int maxValue1 = B[i, 0], maxValue2 = B[i + 1, 0];            int indMax1 = 0, indMax2 = 0;                    indMax1 = j;                    maxValue1 = B[i, j];                    indMax2 = j;                    maxValue2 = B[i + 1, j];            B[i, indMax1] = maxValue2;            B[i + 1, indMax2] = maxValue1;    public int[,] Task_2_9(int[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight != 6 && AWeight != 7)                int temp = A[i, j];                A[i, j] = A[i, AWeight - j - 1];                A[i, AWeight - j - 1] = temp;    #region Level 3    public int[,] Task_3_1(int[,] matrix)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != 7 && AWeight != 5)        int[] minVal = new int[AHeight];        int[] minValInd = new int[AHeight];            int minElem = matrix[i, 0];                if (matrix[i, j] < minElem)                    minElem = matrix[i, j];            minVal[i] = minElem;            int key = minVal[i];            int iKey = minValInd[i];            int j = i - 1;                minVal[j + 1] = minVal[j];                minValInd[j + 1] = minValInd[j];                j -= 1;            minVal[j + 1] = key;            minValInd[j + 1] = iKey;        int[,] sortedMatrix = new int[AHeight, AWeight];            int originalRowInd = minValInd[i];                sortedMatrix[i, j] = matrix[originalRowInd, j];        matrix = sortedMatrix;    public int[,] Task_3_2(int[,] matrix)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight)            matrix[0, i] = 0;            matrix[i, 0] = 0;            matrix[i, AHeight - 1] = 0;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight || AHeight < 3)        answer = new int[AHeight * 2 - 1];                int ind = j - i + AHeight - 1;                answer[ind] += matrix[i, j];    public int[,] Task_3_4(int[,] matrix)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight)    public int[,] Task_3_5(int[,] matrix, int k)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight || AHeight < 3)        int maxVal = matrix[0, 0];        int indI = -1, indJ = -1;                    maxVal = matrix[i, j];                    indJ = j;                int temp = matrix[i, indJ];                matrix[i, indJ] = matrix[i, k - 1];                matrix[i, k - 1] = temp;                int temp = matrix[indI, j];                matrix[indI, j] = matrix[k - 1, j];                matrix[k - 1, j] = temp;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int[] lower = default(int[]);        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight)        upper = new int[AHeight * (AHeight + 1) / 2];        lower = new int[(AHeight * (AHeight + 1) / 2) - AHeight];        int cnt1 = 0, cnt2 = 0;                    upper[cnt1] = matrix[i, j];                    cnt1++;                    lower[cnt2] = matrix[i, j];                    cnt2++;    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        int lenghtA = A.Length, lenghtB = B.Length;        if (lenghtA < 2 || lenghtB < 2)        int ind = 0;                matrixA[i, j] = A[ind];                matrixA[j, i] = A[ind];                matrixB[i, j] = B[ind];                matrixB[j, i] = B[ind];                ind++;        int indc = 0;                    matrixC[indc] += matrixA[i, j] * matrixB[j, col];                indc++;        // int[] C = new int [n * n];        answer = matrixC;    public int[,] Task_3_8(int[,] matrix)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != 7 && AWeight != 5)                maxVal = countPos[i];                        int temp = matrix[j, k];                        matrix[j, k] = matrix[j + 1, k];                        matrix[j + 1, k] = temp;                    int tempCount = countPos[j];                    countPos[j] = countPos[j + 1];                    countPos[j + 1] = tempCount;    public int[,] Task_3_9(int[,] matrix)    public int[,] Task_3_10(int[,] matrix)        int rows = matrix.GetLength(0), columns = matrix.GetLength(1);                            int temp = matrix[i, k];                            matrix[i, k] = matrix[i, k + 1];                            matrix[i, k + 1] = temp;                            int temp = matrix[i, k];                            matrix[i, k] = matrix[i, k + 1];                            matrix[i, k + 1] = temp;    public int[,] Task_3_11(int[,] matrix)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight < 2)        int nonZeroRowsCount = 0;            bool hasZero = false;                    hasZero = true;            if (hasZero == false)        int[,] filteredMatrix = new int[nonZeroRowsCount, AWeight];        int currentRow = 0;            bool hasZero = false;                    hasZero = true;            if (hasZero == false)                    filteredMatrix[currentRow, j] = matrix[i, j];        matrix = filteredMatrix;    public int[,] Task_3_1(int[,] matrix)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != 7 && AWeight != 5)        int[] minVal = new int[AHeight];        int[] minValInd = new int[AHeight];            int minElem = matrix[i, 0];                if (matrix[i, j] < minElem)                    minElem = matrix[i, j];            minVal[i] = minElem;            int key = minVal[i];            int iKey = minValInd[i];            int j = i - 1;                minVal[j + 1] = minVal[j];                minValInd[j + 1] = minValInd[j];                j -= 1;            minVal[j + 1] = key;            minValInd[j + 1] = iKey;        int[,] sortedMatrix = new int[AHeight, AWeight];            int originalRowInd = minValInd[i];                sortedMatrix[i, j] = matrix[originalRowInd, j];        matrix = sortedMatrix;    public int[,] Task_3_2(int[,] matrix)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight)            matrix[0, i] = 0;            matrix[i, 0] = 0;            matrix[i, AHeight - 1] = 0;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight || AHeight < 3)        answer = new int[AHeight * 2 - 1];                int ind = j - i + AHeight - 1;                answer[ind] += matrix[i, j];    public int[,] Task_3_5(int[,] matrix, int k)        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight || AHeight < 3)        int maxVal = matrix[0, 0];        int indI = -1, indJ = -1;                    maxVal = matrix[i, j];                    indJ = j;                int temp = matrix[i, indJ];                matrix[i, indJ] = matrix[i, k - 1];                matrix[i, k - 1] = temp;                int temp = matrix[indI, j];                matrix[indI, j] = matrix[k - 1, j];                matrix[k - 1, j] = temp;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int[] lower = default(int[]);        int AHeight = matrix.GetLength(0), AWeight = matrix.GetLength(1);        if (AHeight != AWeight)        upper = new int[AHeight * (AHeight + 1) / 2];        lower = new int[(AHeight * (AHeight + 1) / 2) - AHeight];        int cnt1 = 0, cnt2 = 0;                    upper[cnt1] = matrix[i, j];                    cnt1++;                    lower[cnt2] = matrix[i, j];                    cnt2++;    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        int lenghtA = A.Length, lenghtB = B.Length;        if (lenghtA < 2 || lenghtB < 2)        int ind = 0;                matrixA[i, j] = A[ind];                matrixA[j, i] = A[ind];                matrixB[i, j] = B[ind];                matrixB[j, i] = B[ind];                ind++;        int indc = 0;                    matrixC[indc] += matrixA[i, j] * matrixB[j, col];                indc++;        // int[] C = new int [n * n];        answer = matrixC;
