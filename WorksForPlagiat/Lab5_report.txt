5
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab5\Алексеев.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab5\Баланов.cs
4
    public void Task_2_21(int[,] A, int[,] B, out int[] answerA, out int[] answerB)        answerA = null;        answerB = null;        answerA = CreateArrayFromMins(A);        answerB = CreateArrayFromMins(B);    public void Task_2_25(int[,] A, int[,] B, out int maxA, out int maxB)        maxA = 0;        maxB = 0;        maxA = FindMaxNegativeRow(A);        maxB = FindMaxNegativeRow(B);        // in FindRowWithMaxNegativeCount create and use CountNegativeInRow(matrix, rowIndex); like in 2_22    public void Task_2_27(int[,] A, int[,] B)        ReplaceMaxElementEven(A);        ReplaceMaxElementOdd(A);        ReplaceMaxElementEven(B);        ReplaceMaxElementOdd(B);    public void Task_3_2(int[,] matrix)        // SortRowStyle sortStyle = default(SortRowStyle); - uncomment me        // change method in variable sortStyle in the loop here and use it for row sorting    public delegate void SwapDirection(double[] array);    public void SwapRight(double[] array)        for (int i = 0; i < array.Length - 1; i += 2)            (array[i], array[i + 1]) = (array[i + 1], array[i]);    public void SwapLeft(double[] array)        for (int i = array.Length - 1; i > 0; i -= 2)            (array[i], array[i - 1]) = (array[i - 1], array[i]);    public double GetSum(double[] array)        double sum = 0;            sum += array[i];
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab5\Баланов.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab5\Калинкин.cs
8
    public void Task_2_6(ref int[] A, int[] B)    public int CountRowPositive(int[,] matrix, int rowIndex)        int result = 0;        int m = matrix.GetLength(1);        for (int j = 0; j < m; j++)            if (matrix[rowIndex, j] > 0)                result++;    public int CountColumnPositive(int[,] matrix, int colIndex)        int result = 0;        int n = matrix.GetLength(0);        for (int i = 0; i < n; i++)            if (matrix[i, colIndex] > 0)                result++;    public void Task_2_14(int[,] matrix)    public double GetAverageWithoutMinMax(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int maxI, maxJ, minI, minJ;        int count = 0;        double sum = 0, average = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (!(i == maxI && j == maxJ) && !(i == minJ && j == minJ))                    count++;                    sum += matrix[i, j];        if (count != 0)            average = sum / count;    public void Task_2_24(int[,] A, int[,] B)    public int CountRowNegative(int[,] matrix, int rowIndex)        int result = 0;        int m = matrix.GetLength(1);        for (int j = 0; j < m; j++)            if (matrix[rowIndex, j] < 0)                result++;    public int FindMaxNegativeRow(int[,] matrix)        int n = matrix.GetLength(0);        int maxValue = -1;        int maxRowIndex = -1;        for (int i = 0; i < n; i++)            if (CountRowNegative(matrix, i) > maxValue)                maxValue = CountRowNegative(matrix, i);                maxRowIndex = i;    public void Task_2_25(int[,] A, int[,] B, out int maxA, out int maxB)        maxA = 0;        maxB = 0;        maxA = FindMaxNegativeRow(A);        maxB = FindMaxNegativeRow(B);    public void Task_2_27(int[,] A, int[,] B)        ReplaceMaxElementEven(A);        ReplaceMaxElementEven(B);        ReplaceMaxElementOdd(A);        ReplaceMaxElementOdd(B);    public void Task_3_1(ref double[,] firstSumAndY, ref double[,] secondSumAndY)        double a1 = 0.1, b1 = 1, h1 = 0.1;        firstSumAndY = new double[(int)((b1 - a1) / h1) + 1, 2];        GetSumAndY(s1Term, y3_1_1, a1, b1, h1, firstSumAndY);        double a2 = Math.PI / 5, b2 = Math.PI, h2 = Math.PI / 25;        secondSumAndY = new double[(int)((b2 - a2) / h2) + 1, 2];        GetSumAndY(s2Term, y3_1_2, a2, b2, h2, secondSumAndY, 1);    public void Task_3_2(int[,] matrix)        // SortRowStyle sortStyle = default(SortRowStyle); - uncomment me        // change method in variable sortStyle in the loop here and use it for row sorting    public delegate void SwapDirection(double[] array);    public void SwapRight(double[] array)        for (int i = 0; i < array.Length - 1; i += 2)            (array[i], array[i + 1]) = (array[i + 1], array[i]);    public void SwapLeft(double[] array)        for (int i = array.Length - 1; i > 0; i -= 2)            (array[i], array[i - 1]) = (array[i - 1], array[i]);    public double GetSum(double[] array)        double sum = 0;        for (int i = 1; i < array.Length; i += 2)            sum += array[i];    public double Task_3_3(double[] array)        double answer = 0;        double sum = 0;        foreach (double num in array)            sum += num;        double average = sum / array.Length;        swapper = (array[0] > average) ? SwapRight : SwapLeft;        swapper(array);        answer = GetSum(array);
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab5\Масалимов.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab5\Шуляковская.cs
7
    public long Task_1_1(int n, int k)        long answer = 0;        answer = Combinations(n, k);    int Factorial(int n)        int res = 1, a = 1;        while (a <= n)            res *= a;            a++;    long Combinations(int n, int k)        long res = Factorial(n) / Factorial(k) / Factorial(n - k);    public int Task_1_2(double[] first, double[] second)        int answer = 0;        double s1 = GeronArea(first[0], first[1], first[2]);        double s2 = GeronArea(second[0], second[1], second[2]);        if (s1 == 0 || s2 == 0) answer = -1;        else if (s1 == s2) answer = 0;        else if (s1 > s2) answer = 1;        else answer = 2;        // first = 1, second = 2, equal = 0, error = -1    double GeronArea(double a, double b, double c)        double p = (a + b + c) / 2;        double s = Math.Sqrt(p * (p - a) * (p - b) * (p - c));    public int Task_1_3a(double v1, double a1, double v2, double a2, int time)        int answer = 0;        double res1 = GetDistance(v1, a1, time);        double res2 = GetDistance(v2, a2, time);        if (res1 == res2) answer = 0;        else if (res1 > res2) answer = 1;        else answer = 2;        // first = 1, second = 2, equal = 0    double GetDistance(double v, double a, int t)        double s = v * t + a * t * t / 2;    public int Task_1_3b(double v1, double a1, double v2, double a2)        int answer = 0;        double ans = (2 * (v2 - v1) / (a1 - a2));        answer = (int)Math.Ceiling(ans);    public void Task_2_2(double[] A, double[] B)        int maxiA = FindMaxIndex(A);        int maxiB = FindMaxIndex(B);        if (maxiA < maxiB)            Change(A, maxiA);        else            Change(B, maxiB);        // only 1 array has to be changed!    void Change(double[] array, int maxind)        double sr = 0, c = 0, maxA = array[maxind];        for (int i = maxind + 1; i < array.Length; i++)            sr += array[i];            c++;        sr /= c;        for (int i = 0; i < array.Length; i++)            if (array[i] == maxA) array[i] = sr;    int FindMaxIndex(double[] array)        int maxindex = 0;        for (int i = 0; i < array.Length; i++)            if (array[i] > array[maxindex]) maxindex = i;    public void Task_2_16(int[] A, int[] B)        SortNegative(B);    void SortNegative(int[] array)            if (array[i] < 0)                int key = array[i], k = i - 1;                while (k >= 0)                    if (array[k] >= 0)                        k--;                        continue;                    if (array[k] > array[i])                        break;                    array[i] = array[k];                    array[k] = key;                    i = k;                    k--;            j++;    public void Task_2_20(ref int[,] A, ref int[,] B)        Delete(ref A);        Delete(ref B);    void Delete(ref int[,] matrix)        for (int j = matrix.GetLength(1) - 1; j >= 0; j--)            int count = 0;            for (int i = 0; i < matrix.GetLength(0); i++)                if (matrix[i, j] == 0)                    count++;                    break;            if (count == 0) matrix = RemoveColumn(matrix, j);    public void Task_2_28a(int[] first, int[] second, ref int answerFirst, ref int answerSecond)        answerFirst = FindSequence(first, 0, first.Length - 1);        answerSecond = FindSequence(second, 0, second.Length - 1);        // A and B - start and end indexes of elements from array for search    int FindSequence(int[] array, int A, int B)        if (A > B) (A, B) = (B, A);            if (array[i] <= array[i + 1]) countinc++;            if (array[i] >= array[i + 1]) countdec++;    public void Task_2_28b(int[] first, int[] second, ref int[,] answerFirst, ref int[,] answerSecond)        int countfirst = CountSequence(first);        answerFirst = new int[countfirst, 2];        FindIntervals(first, answerFirst);        int countsecond = CountSequence(second);        answerSecond = new int[countsecond, 2];        FindIntervals(second, answerSecond);        // A and B - start and end indexes of elements from array for search    void FindIntervals(int[] array, int[,] answer)        for (int i = 0, k = 0; i < array.Length; i++)            for (int j = i + 1; j < array.Length; j++)                int res = FindSequence(array, i, j);                if (res == 1 || res == -1)                    answer[k, 0] = i;                    answer[k, 1] = j;                    k++;    int CountSequence(int[] array)        int count = 0;        for (int i = 0; i < array.Length; i++)            for (int j = i + 1; j < array.Length; j++)                int res = FindSequence(array, i, j);                if (res == 1 || res == -1)                    count++;    public void Task_2_28c(int[] first, int[] second, ref int[] answerFirst, ref int[] answerSecond)        int[,] res1 = null;        int[,] res2 = null;        Task_2_28b(first, second, ref res1, ref res2);        answerFirst = new int[2];        answerSecond = new int[2];        FindBiggestInterval(res1, ref answerFirst);        FindBiggestInterval(res2, ref answerSecond);        // A and B - start and end indexes of elements from array for search    void FindBiggestInterval(int[,] intervals, ref int[] answer)        int maxint = 0;        for (int i = 0; i < intervals.GetLength(0); i++)            if (intervals[i, 1] - intervals[i, 0] > maxint)                answer[0] = intervals[i, 0];                answer[1] = intervals[i, 1];
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab5\Обрезков.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab5\Петрова.cs
5
    public void Task_2_8(int[] A, int[] B)    public int[] SumPositiveElementsInColumns(int[,] matrix)        int[] array = new int[matrix.GetLength(1)];        for (int j = 0; j < matrix.GetLength(1); j++)            for (int i = 0; i < matrix.GetLength(0); i++)    public void Task_2_14(int[,] matrix)    public double GetAverageWithoutMinMax(int[,] matrix)        int max = matrix[0, 0], indexMaxI = 0, indexMaxJ = 0, min = matrix[0, 0], indexMinI = 0, indexMinJ = 0;        for (int i = 0; i < matrix.GetLength(0); i++)            for (int j = 0; j < matrix.GetLength(1); j++)                if (matrix[i, j] > max)                    max = matrix[i, j];                    indexMaxI = i;                    indexMaxJ = j;                if (matrix[i, j] < min)                    min = matrix[i, j];                    indexMinI = i;                    indexMinJ = j;        double sum = 0;        int cnt = 0;        for (int i = 0; i < matrix.GetLength(0); i++)            for (int j = 0; j < matrix.GetLength(1); j++)                sum += matrix[i, j];                cnt++;    public void Task_2_19(ref int[,] matrix)        for (int i = 0; i < matrix.GetLength(0); i++)            bool flag = false;            for (int j = 0; j < matrix.GetLength(1); j++)                if (matrix[i, j] == 0)                    flag = true;                    break;            if (!flag) continue;            i--;    public void Task_2_24(int[,] A, int[,] B)    public int FindRowWithMaxNegativeCount(int[,] matrix)        int max = int.MinValue, index = -1;        for (int i = 0; i < matrix.GetLength(0); i++)            int cnt = CountNegativeInRow(matrix, i);            if (cnt > max)                max = cnt;                index = i;    public int CountNegativeInRow(int[,] matrix, int rowIndex)        int cnt = 0;        for (int j = 0; j < matrix.GetLength(1); j++)    public void Task_2_26(int[,] A, int[,] B)        // in FindRowWithMaxNegativeCount use CountNegativeInRow(matrix, rowIndex); from 2_22    public void FindRowMaxIndex(int[,] matrix, int rowIndex, out int columnIndex)        int max = matrix[rowIndex, 0];        columnIndex = 0;        for (int j = 0; j < matrix.GetLength(1); j++)            if (matrix[rowIndex, j] > max)                max = matrix[rowIndex, j];                columnIndex = j;    public void ReplaceMaxElementOdd(int[,] matrix, int row, int column)        matrix[row, column] *= column + 1;    public void ReplaceMaxElementEven(int[,] matrix, int row, int column)        matrix[row, column] = 0;    public void ReplaceMatrixElements(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0); i++)            int index;            if ((i + 1) % 2 != 0)                FindRowMaxIndex(matrix, i, out index);                ReplaceMaxElementOdd(matrix, i, index);            else                FindRowMaxIndex(matrix, i, out index);                ReplaceMaxElementEven(matrix, i, index);
