10
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Бахров.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Горохова.cs
7
    public double[,] Task_2_1(double[,] A)        int n = A.GetLength(0);        int m = A.GetLength(1);        if (n != 5 || m != 7)        for (int i = 0; i < n; i++)            double amax = -100;            int jmax = -1;                    amax = A[i, j];                    jmax = j;            if (jmax != 0 && jmax != m - 1)                if (A[i, jmax - 1] > A[i, jmax + 1])                    if (A[i, jmax + 1] > 0)                        A[i, jmax + 1] *= 2;                    else if (A[i, jmax + 1] < 0)                        A[i, jmax + 1] /= 2;                else if (A[i, jmax - 1] < A[i, jmax + 1])                    if (A[i, jmax - 1] > 0)                        A[i, jmax - 1] *= 2;                    else if (A[i, jmax - 1] < 0)                        A[i, jmax - 1] /= 2;                    if (jmax == m - 1)                        if (A[i, jmax - 1] > 0)                            A[i, jmax - 1] *= 2;                        else if (A[i, jmax - 1] < 0)                            A[i, jmax - 1] /= 2;                        if (A[i, jmax + 1] > 0)                            A[i, jmax + 1] *= 2;                        else if (A[i, jmax + 1] < 0)                            A[i, jmax + 1] /= 2;    #endregion    public int[,] Task_3_1(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (matrix == null || n != 7 || m != 5)        for (int i = 0; i < n - 1; i++)            for (int j = i + 1; j < n; j++)                int imin = 100000, jmin = 100000;                for (int k = 0; k < m; k++)                    if (matrix[i, k] < imin)                        imin = matrix[i, k];                    if (matrix[j, k] < jmin)                        jmin = matrix[j, k];                if (imin < jmin)                    for (int k = 0; k < m; k++)                        int temp = matrix[i, k];                        matrix[i, k] = matrix[j, k];                        matrix[j, k] = temp;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (n != m)        answer = new int[n * 2 - 1];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int ind = j - i + (n - 1);                answer[ind] += matrix[i, j];    public int[,] Task_3_5(int[,] matrix, int k)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        if (matrix == null || n != m || k < 1 || k > n)        int amax = -100000, imax = 0, jmax = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (amax < Math.Abs(matrix[i, j]))                    amax = Math.Abs(matrix[i, j]);                    imax = i;                    jmax = j;        if (jmax != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[i, jmax];                matrix[i, jmax] = matrix[i, k - 1];                matrix[i, k - 1] = temp;        if (imax != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[imax, i];                matrix[imax, i] = matrix[k - 1, i];                matrix[k - 1, i] = temp;    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        answer = new int[n * n];        int[,] mA = new int[n, n];        int[,] mB = new int[n, n];        int k = 0;        int c = 0;        if (n <= 0 || A.Length / 2 != n || B.Length / 2 != n)        for (int i = 0; i < n; i++)            for (int j = i; j < n; j++)                mA[i, j] = A[k];                mB[i, j] = B[k];                k++;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                mA[j, i] = mA[i, j];                mB[j, i] = mB[i, j];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int s = 0;                for (int q = 0; q < n; q++)                    s += (mA[i, q] * mB[q, j]);                answer[c++] = s;    public int[,] Task_3_9(int[,] matrix)        int[] array = new int[7];        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int k = 0;        int c = 0;        if (n != 5 && m != 7)        for (int j = 0; j < 7; j++)            int g = 0;            for (int i = 0; i < 5; i++)                if (matrix[i, j] < 0)                    g++;        for (int j = 0; j < 7; j++)            for (int i = 0; i < 5; i++)                    c = array[i + 1];                    array[i + 1] = array[i];                    array[i] = c;                    for (int q = 0; q < 5; q++)                        c = matrix[q, i];                        matrix[q, i] = matrix[q, i + 1];                        matrix[q, i + 1] = c;    public int[,] Task_3_11(int[,] matrix)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int z = n;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (matrix[i, j] == 0)                    z--;                    matrix[i, 0] = 0;                    break;        int[,] A = new int[z, m];        int q = 0;        for (int i = 0; i < n; i++)            if (matrix[i, 0] != 0)                for (int j = 0; j < m; j++)                    A[q, j] = matrix[i, j];                q++;        matrix = A;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Виноградова.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Тихонов Дмитрий бивт 24-12.cs
4
    public double Task_1_2(int[,] A)        double answer = 0;        int q = 0;        int nom = 0;        if ((A.GetLength(0) == 5) && (A.GetLength(1) == 7))            for (int i = 0; i < 5; i++)                for (int j = 0; j < 7; j++)                    nom = A[i, j];                    if (nom > 0)                        q++;                        answer += A[i, j];            answer = answer / q;    public (int, int) Task_1_5(int[,] A, int colIndex)        int value = 0, rowIndex = -1;        if ((A.GetLength(0) == 5) && (colIndex <= 4))            for (int i = 0; i < 5; i++)                if (A[i, colIndex] < 0)                    value = A[i, colIndex];                    rowIndex = i;                    break;        if (rowIndex == -1)            rowIndex = 0;    public int[,] Task_1_17(int[,] B, int n, int m)        int max = int.MaxValue;        int nom = 0;        int[,] A = new int[B.GetLength(0), B.GetLength(1)];        if ((B.GetLength(0) == n) && (B.GetLength(1) == m))            for (int i = 0; i < n; i++)                for (int j = 0; j < m; j++)                    if (B[i, j] < max)                        max = B[i, j];                        nom = j;                A[i, 0] = B[i, nom];                for (int j = nom + 1; j < m; j++)                nom = 0;                max = int.MaxValue;        else            A = null;    public int[,] Task_1_26(int[,] A, int[] B)        double max = double.MinValue;        int nom = 0;        if ((A.GetLength(0) == 5) && (A.GetLength(1) == 7) && (B.Length == 7))            for (int i = 0; i < 5; i++)                if (A[i, 6] > max)                    max = A[i, 6];                    nom = i;            for (int i = 0; i < 7; i++)        else            A = null;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Вовк.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Талыкова.cs
5
    public int[,] Task_2_4(int[,] A, int[] B)        int strok = A.GetLength(0), stolb = A.GetLength(1), dlina = B.Length;        if (A == null || strok != 7 || stolb != 5 || B == null || dlina != 5)        for (int j = 0; j < stolb; j++)            for (int i = 0; i < strok; i++)                if (A[i, j] > elemax)                    elemax = A[i, j];                    indmax = i;            if (elemax < B[j])                A[indmax, j] = B[j];    public int[,] Task_3_2(int[,] matrix)        int n = matrix.GetLength(0);        if (matrix == null || matrix.GetLength(0) != matrix.GetLength(1))        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (i == 0 || i == n - 1)                    matrix[i, j] = 0;                else                    matrix[i, 0] = 0;                    matrix[i, n - 1] = 0;    public int[,] Task_3_4(int[,] matrix)        int n = matrix.GetLength(0);        if (matrix == null || matrix.GetLength(0) != matrix.GetLength(1))        for (int i = n / 2; i < n; i++)            for (int j = 0; j < n; j++)                if (i >= j)                    matrix[i, j] = 1;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int[] lower = default(int[]);        int n = matrix.GetLength(0), nomerupper = 0, nomerlower = 0;        if (matrix == null || matrix.GetLength(0) != matrix.GetLength(1))        lower = new int[n * n - n * n / 2 - n / 2];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (i <= j)                    upper[nomerupper++] = matrix[i, j];                else                    lower[nomerlower++] = matrix[i, j];    public int[,] Task_3_11(int[,] matrix)        int strok = matrix.GetLength(0), stolb = matrix.GetLength(1);        int minusstrok = 0;        if (matrix == null)        for (int i = 0; i < strok; i++)            for (int j = 0; j < stolb; j++)                if (matrix[i, j] == 0)                    minusstrok++;                    break;        int[,] array = new int[strok - minusstrok, stolb];        for (int i = 0, k = 0; i < strok; i++)            int flag = 0;            for (int j = 0; j < stolb; j++)                if (matrix[i, j] == 0)                    flag++;                    break;            for (int j = 0; j < stolb; j++)                if (flag == 0)                    array[k, j] = matrix[i, j];            if (flag == 0)                k++;        matrix = array;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Каверина.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Михайлов.cs
4
    public (int, int) Task_1_5(int[,] A, int colIndex)        int value = 0, rowIndex = -1;        for (int i = 0; i < A.GetLength(0); i++)            if (A[i, colIndex] < 0)                value = A[i, colIndex];                rowIndex = i;                break;    public int[,] Task_2_6(int n)        int[,] answer = new int[n, 3 * n];        for (int i = 0; i < n; i++)            answer[i, i] = 1;            answer[i, n + i] = 1;            answer[i, n + n + i] = 1;    public int[,] Task_3_2(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0); i++)            matrix[i, 0] = 0;            matrix[0, i] = 0;            matrix[i, matrix.GetLength(1) - 1] = 0;            matrix[matrix.GetLength(0) - 1, i] = 0;    public (int[], int[]) Task_3_6(int[,] matrix)        int n = matrix.GetLength(0);        int[] upper = new int[n * (n + 1) / 2];        int[] lower = new int[n * (n - 1) / 2];        int indUp = 0, indDown = 0;        for (int i = 0; i < matrix.GetLength(0); i++)            for (int j = 0; j < matrix.GetLength(1); j++)                if (i > j) lower[indDown++] = matrix[i, j];                else upper[indUp++] = matrix[i, j];
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Котяева.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Тихонов Дмитрий бивт 24-12.cs
4
    public (int, int) Task_1_5(int[,] A, int colIndex)        int value = 0, rowIndex = -1;        if ((A.GetLength(0) == 5) && (colIndex <= 4))            for (int i = 0; i < 5; i++)                if (A[i, colIndex] < 0)                    value = A[i, colIndex];                    rowIndex = i;                    break;        if (rowIndex == -1)            rowIndex = 0;    public double[] Task_1_8(int[,] A)        double[] answer = new double[A.GetLength(0)];        double a = 0;        double summ = 0;        if ((A.GetLength(0) == 4) && (A.GetLength(1) == 6))            for (int i = 0; i < 4; i++)                for (int j = 0; j < 6; j++)                    if (A[i, j] > 0)                        a++;                        summ += A[i, j];                if (a != 0)                    summ = Math.Round(summ / a, 2);                else                    summ = 0;                a = 0;                answer[i] = summ;                summ = 0;        else            answer = null;    public int[,] Task_1_11(int[,] A)        int nom = 0;        double min = double.MaxValue;        if ((A.GetLength(0) == 5) && (A.GetLength(1) == 7))            for (int i = 0; i < 5; i++)                if (A[i, 0] < min)                    min = A[i, 0];                    nom = i;            for (int j = 0; j < 7; j++)                for (int i = 0; i < nom; i++)                    B[i, j] = A[i, j];                for (int i = nom + 1; i < 5; i++)            min = double.MaxValue;            nom = 0;        else            B = null;    public int[] Task_1_14(int[,] A)        int[] answer = new int[A.GetLength(1)];        int nom = 0;        if ((A.GetLength(0) == 4) && (A.GetLength(1) == 3))            for (int i = 0; i < 3; i++)                for (int j = 0; j < 4; j++)                        nom++;                answer[i] = nom;                nom = 0;        else            answer = null;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Литвин.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Ролдугин.cs
5
    public int[,] Task_3_2(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0); i++)            matrix[0, i] = 0;            matrix[i, 0] = 0;            matrix[i, matrix.GetLength(0) - 1] = 0;            matrix[matrix.GetLength(0) - 1, i] = 0;    public int[,] Task_3_4(int[,] matrix)        int strok = matrix.GetLength(0);        int stolb = matrix.GetLength(1);        for (int i = strok / 2 - 1 + strok % 2; i < strok; i++)            for (int g = 0; g <= i; g++)                matrix[i, g] = 1;    public (int[], int[]) Task_3_6(int[,] matrix)        int[] upper = default(int[]);        int f = 0, k = 0;        upper = new int[matrix.GetLength(0) * (matrix.GetLength(0) - 1) / 2];        int[] lower = default(int[]);        lower = new int[matrix.GetLength(0) * (matrix.GetLength(0) - 1) / 2 + matrix.GetLength(0)];        for (int i = 0; i < matrix.GetLength(0); i++)            for (int g = 0; g < matrix.GetLength(1); g++)                if (i > g) upper[f++] = matrix[i, g];                else lower[k++] = matrix[i, g];    public int[,] Task_3_8(int[,] matrix)        for (int i = 0; i < matrix.GetLength(0) - 1; i++)            for (int j = 0; j < matrix.GetLength(0) - i - 1; j++)                if (count_elements(j, matrix) < count_elements(j + 1, matrix))                    for (int s = 0; s < matrix.GetLength(1); s++)                        int templ = matrix[j, s];                        matrix[j, s] = matrix[j + 1, s];                        matrix[j + 1, s] = templ;    int count_elements(int strok, int[,] matrix)        int count = 0;        for (int i = 0; i < matrix.GetLength(1); i++)            if (matrix[strok, i] > 0) count++;    public int[,] Task_3_11(int[,] matrix)        int count = 0;        for (int i = 0; i < matrix.GetLength(0); i++)            for (int j = 0; j < matrix.GetLength(1); j++)                if (matrix[i, j] == 0)                    count++;                    break;        Console.WriteLine(count);        int s = 0;        int[,] new_matrix = new int[matrix.GetLength(0) - count, matrix.GetLength(1)];        for (int i = 0; i < matrix.GetLength(0); i++)            bool flag = true;            for (int j = 0; j < matrix.GetLength(1); j++)                new_matrix[s, j] = matrix[i, j];                if (matrix[i, j] == 0)                    flag = false;                    break;            Console.WriteLine(s);            if (s == new_matrix.GetLength(0) - 1) break;            if (flag) s++;        PrintMatrix(new_matrix);
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Лоскутова.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Малаховский.cs
4
    public (int, int) Task_1_5(int[,] A, int colIndex)        int value = 0, rowIndex = -1;        for (int i = 0; i < A.GetLength(0); i++)            if (A[i, colIndex] < 0)                value = A[i, colIndex];                rowIndex = i;                break;    public int[] Task_1_14(int[,] A)        int[] answer = new int[A.GetLength(1)];        for (int i = 0; i < A.GetLength(1); i++)            int count = 0;            for (int j = 0; j < A.GetLength(0); j++)            answer[i] = count;    public int[,] Task_1_29(int[,] F)        int[,] A = new int[F.GetLength(0), F.GetLength(1) - 1];        int minn = Math.Abs(F[1, 0]);        int jmin = 0;        for (int j = 0; j < F.GetLength(1); j++)            if (Math.Abs(F[1, j]) < minn)                minn = Math.Abs(F[1, j]);                jmin = j;        for (int i = 0; i < F.GetLength(0); i++)            for (int j = 0; j < F.GetLength(1); j++)                if (j <= jmin)                    A[i, j] = F[i, j];                else if (j > jmin + 1)                    A[i, j - 1] = F[i, j];    public int[,] Task_2_6(int n)        int[,] answer = new int[n, 3 * n];        double count = 0;        for (int i = 0; i < answer.GetLength(0); i++)            for (int j = 0; j < answer.GetLength(1); j++)                if (j == count || j == n + i || j == 2 * n + i)                    answer[i, j] = 1;                else                    answer[i, j] = 0;            count++;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Мещеряков.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Чечётин.cs
18
    public int Task_1_3(int[,] A)        int answer = 0;        int j =  A.GetLength(0) - 1;        for (int i = 0; i < A.GetLength(0); i++, j--)                answer += A[i, j];            answer += A[i, i];    public int[] Task_1_6(int[,] A)        int[] answer = default(int[]);        answer = new int[A.GetLength(0)];        int maxElem;        int indexMaxElem = 0;        for (int i = 0; i < A.GetLength(0); i++)            maxElem = A[i, 0];            for(int j = 0; j < A.GetLength(1); j++)                if (maxElem > A[i, j])                    maxElem = A[i, j];                    indexMaxElem = j;            answer[i] = indexMaxElem;    public int[,] Task_1_9(int[,] A)        if (A.GetLength(0) != 4 && A.GetLength(1) != 7)        int [] answer = new int[A.GetLength(0)];        int maxElem;        int indexMaxElem = 0;        for (int i = 0; i < A.GetLength(0); i++)            maxElem = A[i, 0];            for(int j = 0; j < A.GetLength(1); j++)                if (maxElem < A[i, j])                    maxElem = A[i, j];                    indexMaxElem = j;            answer[i] = indexMaxElem;        for(int i = 0; i < answer.Length; i++)            int temp = A[i, 0];            A[i, 0] = A[i, answer[i]];            A[i, answer[i]] = temp;    public int[,] Task_1_12(int[,] A)        if (A.GetLength(0) != 6 || A.GetLength(1) != 7)        int n = A.GetLength(0), m = A.GetLength(1);        int maxElem = int.MinValue;        int indexRow = -1, indexColum = -1;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (A[i, j] > maxElem)                    maxElem = A[i, j];                    indexRow = i;                    indexColum = j;        int[,] answer = new int[n - 1, m - 1];        for (int i = 0, newRow = 0; i < n; i++)            if (i == indexRow) continue;            for (int j = 0, newCol = 0; j < m; j++)                if (j == indexColum) continue;                answer[newRow, newCol] = A[i, j];                newCol++;            newRow++;        A = answer;    public int[,] Task_1_15(int[,] A)        if (A.GetLength(0) != 5 && A.GetLength(1) != 7)        int [] indekMaxElements = new int[A.GetLength(0)];        int maxElem;        int indexMaxElem = 0;        for (int i = 0; i < A.GetLength(0); i++)            maxElem = A[i, 0];            for(int j = 0; j < A.GetLength(1); j++)                if (maxElem < A[i, j])                    maxElem = A[i, j];                    indexMaxElem = j;            indekMaxElements[i] = indexMaxElem;            indexMaxElem = 0;        for(int i = 0; i < indekMaxElements.Length; i++)            A[i, indekMaxElements[i]] *= i + 1;    public int[,] Task_1_21(int[,] H)        if (H.GetLength(0) != 5 || H.GetLength(1) != 7)        int n = H.GetLength(0);        int m = H.GetLength(1);        int [] maxElemCol = new int[n];        for (int i = 0; i < n; i++)            int maxElem = int.MinValue;            for (int j = 0; j < m; j++)                if (maxElem < H[i, j])                    maxElem = H[i, j];            maxElemCol[i] = maxElem;        for (int i = 0; i < n; i++)            int temp =  H[i, m - 2];            H[i, m - 2] = maxElemCol[i];            H[i, m - 1] = temp;public double[,] Task_1_24(double[,] Y)    int n = Y.GetLength(0);    int m = Y.GetLength(1);    double[] averages = new double[n];     for (int i = 0; i < n; i++)        double max = double.MinValue;        int maxIndex = -1;        for (int j = 0; j < m; j++)            if (Y[i, j] > max)                max = Y[i, j];                maxIndex = j;        double sum = 0;        int count = 0;        for (int j = maxIndex + 1; j < m; j++)            if (Y[i, j] > 0)                sum += Y[i, j];                count++;        if (count == 0)            averages[i] = 0;        else            averages[i] = Math.Round(sum / count, 2);        for (int j = 0; j < maxIndex; j++)            if (Y[i, j] < 0)                Y[i, j] = averages[i];    public int[,] Task_1_27(int[,] B)        if (B.GetLength(0) != 5 || B.GetLength(1) != 7)        int n = B.GetLength(0);        int m = B.GetLength(1);        int[] maxElem = new int[n];        int count = n - 1;        for (int i = 0; i < n; i++)            int max = int.MinValue;            for (int j = 0; j < m; j++)                if (max < B[i, j])                    max = B[i, j];            maxElem[i] = max;        for (int i = 0; i < n; i++)            B[i, 3] = maxElem[count];            count--;    public int[,] Task_1_30(int[,] B)        if (B.GetLength(0) != 5 || B.GetLength(1) != 5)        int n = B.GetLength(0);        int m = B.GetLength(1);        double maxElem = double.MinValue;        int indexMaxElem = -1, indexMinElem = -1;        for(int i = 0; i < n; i++)            if (B[i,i] > maxElem)                maxElem = B[i, i];                indexMaxElem = i;        for(int i = 0; i < n; i++)            if(B[i,2] < 0)                indexMinElem = i;                break;        for(int i = 0; i < n; i++)            int temp = B[indexMaxElem, i];            B[indexMaxElem, i] = B[indexMinElem, i];            B[indexMinElem, i] = temp;    public int[] Task_1_33(int[,] A)        int[] answer = default(int[]);        if (A.GetLength(0) != 5 || A.GetLength(1) != 7)        int n = A.GetLength(0);        int m = A.GetLength(1);        int count = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < m; j++)                if (A[i, j] < 0)                    count++;        answer = new int[count];        count = 0;        for(int i = 0; i < n; i++)            for(int j = 0; j < m; j++)                if (A[i, j] < 0)                    answer[count] = A[i, j];                    count++;    public double[,] Task_2_1(double[,] A)        if (A.GetLength(0) != 5 || A.GetLength(1) != 7)        double n = A.GetLength(0);        double m = A.GetLength(1);        for(int i = 0; i < n; i++)            double maxElem = int.MinValue;            for(int j = 0; j < m; j++)                if(A[i,j] > maxElem)                    maxElem = A[i, j];            for(int j = 0; j < m; j++)                if(A[i,j] == maxElem && j != 0 && j != m - 1)                    if(A[i,j + 1] < A[i,j - 1])                        j++;                    else                        j--;                    if (A[i,j] > 0)                        A[i,j] *= 2;                    else                        A[i,j] /= 2;                    break;    #endregion    public int[,] Task_2_3(int[,] A)        int n = A.GetLength(0);        int m = A.GetLength(1);        for(int j = 0; j < m; j++)            int maxElem = int.MinValue;            int indexMaxElem = -1;            for(int i = 0; i < n; i++)                if(A[i, j] > maxElem)                    maxElem = A[i, j];                    indexMaxElem = i;            if (indexMaxElem < n/2)                int sum = 0;                for(int i = indexMaxElem + 1; i < n; i++)                    sum += A[i, j];                A[0,j] = sum;    public int[,] Task_2_4(int[,] A, int[] B)        if (A.GetLength(0) != 7 || A.GetLength(1) != 5 || B.Length != 5)        int n = A.GetLength(0);        int m = A.GetLength(1);        for(int j = 0; j < m; j++)            int maxElem = int.MinValue;            int maxIndex = -1;            for(int i = 0; i < n; i++)                if(A[i, j] > maxElem)                    maxElem = A[i, j];                    maxIndex = i;            if(A[maxIndex, j] < B[j])                A[maxIndex, j] = B[j];    public int[,] Task_2_6(int n)        int[,] answer = default(int[,]);        if(n < 0)        answer = new int[n, n * 3];        for(int i = 0; i < n; i++)            for(int j = 0; j < n * 3; j++)                answer[i, j] = 0;        for(int i = 0; i < n; i++)            answer[i, i] = 1;            answer[i, n + i] = 1;            answer[i, 2 * n + i] = 1;    public int[,] Task_2_7(int[,] A)        if (A.GetLength(0)!= 6 || A.GetLength(1)!= 6)        int n = A.GetLength(0);        int m = A.GetLength(1);        int maxElem = int.MinValue;        int indexElem = -1;        for(int i = 0; i < n; i++)            if(A[i,i] > maxElem)                maxElem = A[i,i];                indexElem = i;        int test = 0;        for(int i = 0; i < n; i++)            test = i;            if(test == indexElem) break;               for(int j = 0; j < m; j++)                if(j > i)                    A[i, j] = 0;       public int[,] Task_2_8(int[,] B)        if (B.GetLength(0)!= 6 || B.GetLength(1)!= 6)        int n = B.GetLength(0);        int m = B.GetLength(1);        for(int i = 0; i < n; i+=2)            int firstMaxElem = int.MinValue, secMaxElem = int.MinValue;            int firstMaxIndex = -1, secMaxIndex = -1;            int temp = 0;            for(int j = 0; j < m; j++)                if(firstMaxElem < B[i,j])                    firstMaxElem = B[i,j];                    firstMaxIndex = j;                if(secMaxElem < B[i + 1, j])                    secMaxElem = B[i + 1, j];                    secMaxIndex = j;            temp = firstMaxElem;            B[i, firstMaxIndex] = secMaxElem;            B[i + 1, secMaxIndex] = temp;    public int[,] Task_3_1(int[,] matrix)        if(matrix.GetLength(0) != 7 || matrix.GetLength(1) != 5)        int n = matrix.GetLength(0);        int m = matrix.GetLength(1);        int[] minElems = new int[n];        int[] minElemIndexes = new int[n];        for (int i = 0; i < n; i++)            int minElem = int.MaxValue;            minElemIndexes[i] = i;             for (int j = 0; j < m; j++)                if (matrix[i, j] < minElem)                    minElem = matrix[i, j];            minElems[i] = minElem;        for (int i = 1; i < n; i++)            int key = minElems[i];            int indexKey = minElemIndexes[i];            int j = i - 1;            while (j >= 0 && minElems[j] < key)                 minElems[j + 1] = minElems[j];                minElemIndexes[j + 1] = minElemIndexes[j];                j -= 1;            minElems[j + 1] = key;            minElemIndexes[j + 1] = indexKey;        int[,] sortedMatrix = new int[n, m];        for (int i = 0; i < n; i++)            int originalRowIndex = minElemIndexes[i];            for (int j = 0; j < m; j++)                sortedMatrix[i, j] = matrix[originalRowIndex, j];        matrix = sortedMatrix;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        if(matrix.GetLength(0) != matrix.GetLength(1))        int n = matrix.GetLength(0);        answer = new int[n * 2 - 1];        for(int i = 0; i < n; i++)            for(int j = 0; j < n; j++)                int index = j - i + (n - 1);                answer[index] += matrix[i, j];
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Нечипас.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Таровик.cs
7
    public double[,] Task_2_1(double[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        if (n != 5 || m != 7)        for (int i = 0; i < n; i++)            double max = double.MinValue;            int jmax = 0;            for (int j = 0; j < m; j++)                if (A[i, j] > max)                    max = A[i, j];                    jmax = j;            if (jmax == 0 || A[i, jmax - 1] > A[i, jmax + 1])                if (A[i, jmax + 1] > 0)                    A[i, jmax + 1] *= 2;                else if (A[i, jmax + 1] < 0)                    A[i, jmax + 1] /= 2;            else if (jmax == m - 1 || A[i, jmax - 1] < A[i, jmax + 1])                if (A[i, jmax - 1] > 0)                    A[i, jmax - 1] *= 2;                else if (A[i, jmax - 1] < 0)                    A[i, jmax - 1] /= 2;    #endregion    public int[,] Task_2_3(int[,] A)        int n = A.GetLength(0), m = A.GetLength(1);        if (n != 10 || m != 5)        for (int j = 0; j < m; j++)            int max = int.MinValue, imax = 0;            for (int i = 0; i < n; i++)                if (A[i, j] > max)                    max = A[i, j];                    imax = i;            if (imax < (n / 2))                int sum = 0;                for (int i = imax + 1; i < n; i++)                    sum += A[i, j];                A[0, j] = sum;    public int[,] Task_3_1(int[,] matrix)        int n = matrix.GetLength(0), m = matrix.GetLength(1);        int[,] newmatrix = new int[n, 2];        const int min = int.MaxValue;        for (int i = 0; i < n; i++)            newmatrix[i, 0] = i;            newmatrix[i, 1] = min;            for (int j = 0; j < m; j++)                if (matrix[i, j] < newmatrix[i, 1])                    newmatrix[i, 1] = matrix[i, j];        for (int i = 1, j = 2; i < n;)            else                int temp = newmatrix[i, 1],                itemp = newmatrix[i, 0],                inext = newmatrix[i - 1, 0];                for (int k = 0; k < m; k++)                    int temp1 = matrix[i, k];                    matrix[i, k] = matrix[i - 1, k];                    matrix[i - 1, k] = temp1;                newmatrix[i, 1] = newmatrix[i - 1, 1];                newmatrix[i, 0] = newmatrix[i - 1, 0];                newmatrix[i - 1, 1] = temp;                newmatrix[i - 1, 0] = itemp;                i--;    public int[] Task_3_3(int[,] matrix)        int[] answer = default(int[]);        int n = matrix.GetLength(0), m = matrix.GetLength(1);        answer = new int[n * 2 - 1];        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                int index = j - i + n - 1;                answer[index] += matrix[i, j];    public int[,] Task_3_5(int[,] matrix, int k)        int n = matrix.GetLength(0), m = matrix.GetLength(1);        if (n != m || k < 1)         for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                if (Math.Abs(matrix[i, j]) > Math.Abs(matrix[max[0], max[1]]))                     max[0] = i;                     max[1] = j;        if (max[1] != k - 1)            for (int j = 0; j < n; j++)                int temp = matrix[max[0], j];                matrix[max[0], j] = matrix[k - 1, j];                matrix[k - 1, j] = temp;        if (max[0] != k - 1)            for (int i = 0; i < n; i++)                int temp = matrix[i, max[1]];                matrix[i, max[1]] = matrix[i, k - 1];                matrix[i, k - 1] = temp;    public int[] Task_3_7(int[] A, int[] B, int n)        int[] answer = default(int[]);        int[,] matrix1 = new int[n, n], matrix2 = new int[n, n];        for (int i = 0; i < n; i++)            for (int j = i; j < n; j++)                matrix1[i, j] = A[index];                matrix2[i, j] = B[index];                matrix1[j, i] = A[index];                matrix2[j, i] = B[index];                index++;        int[] matrix3 = new int[n * n];        int index3 = 0;        for (int i = 0; i < n; i++)            for (int j = 0; j < n; j++)                for (int k = 0; k < n; k++)                    matrix3[index3] += matrix1[i, k] * matrix2[k, j];                index3++;        answer = matrix3;    public int[,] Task_3_9(int[,] matrix)        if (matrix == null || matrix.GetLength(0) != 5 || matrix.GetLength(1) != 7)        bool an;        for (int i = 0; i < matrix.GetLength(1); i++)            an = false;            for (int j = 0; j < matrix.GetLength(1) - 1; j++)                for (int z = 0; z < matrix.GetLength(0); z++)                    if (matrix[z, j] < 0)                        ci++;                    if (matrix[z, j + 1] < 0)                        cj++;                if (ci > cj)                    for (int z = 0; z < matrix.GetLength(0); z++)                        int temp = matrix[z, j];                        matrix[z, j] = matrix[z, j + 1];                        matrix[z, j + 1] = temp;                    an = true;            if (an == false)                break;
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Полякова.cs
C:\Users\Markosias\Source\Repos\BIVT24_Antiplagiat\WorksForPlagiat\Lab4\Таровик.cs
4
    public int[,] Task_2_2(int[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight < 3)        for (int j = 0; j < AWeight; j++)            int countPos = 0, countDif = 0;            int maxValue = A[0, j], indMax = 0;            for (int i = 0; i < AHeight; i++)                if (A[i, j] > maxValue)                    maxValue = A[i, j];                    indMax = i;                if (A[i, j] > 0)                    countPos++;                else if (A[i, j] != 0)                    countDif++;            if (countPos > countDif)                A[indMax, j] = 0;            else                A[indMax, j] = indMax + 1;    public int[,] Task_2_4(int[,] A, int[] B)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1), BLenght = B.Length;        if (AHeight < 3 || BLenght != AWeight)        for (int j = 0; j < AWeight; j++)            int maxValue = A[0, j], indMax = 0;            for (int i = 0; i < AHeight; i++)                if (A[i, j] > maxValue)                    maxValue = A[i, j];                    indMax = i;            if (A[indMax, j] < B[j])                A[indMax, j] = B[j];    public int[,] Task_2_6(int n)        int[,] answer = default(int[,]);        if (n < 3)        int[,] A = new int[n, n * 3];        for (int i = 0; i < n; i++)            for (int j = 0; j < n * 3; j++)                if (i == j || i == j - 3 || i == j - 6)                    A[i, j] = 1;                else                    A[i, j] = 0;        answer = A;    public int[,] Task_2_7(int[,] A)        int AHeight = A.GetLength(0), AWeight = A.GetLength(1);        if (AHeight < 3 || AHeight != AWeight)        int maxValue = A[0, 0], iMax = 0;        for (int i = 0; i < AHeight; i++)            if (A[i, i] > maxValue)                iMax = i;                maxValue = A[i, i];        for (int i = 0; i < iMax; i++)            for (int j = 0; j < AWeight; j++)                if (j > i)                    A[i, j] = 0;
